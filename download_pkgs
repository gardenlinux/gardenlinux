#!/usr/bin/env bash

set -exufo pipefail

target="$(realpath "$1")"
releases="$(realpath "$2")"
import_list="$(realpath "$3")"
exclude_patterns="$(realpath "$4")"

dir="$(mktemp -d)"
trap 'cd / && rm -rf "$dir"' EXIT
cd "$dir"

mkdir download
while read -r repo tag; do
	gh release download --dir download --repo "$repo" "$tag"
	if [ -e download/build.tar.xz.0000 ]; then
		set +f
		cat download/build.tar.xz.* | xz -d | tar -C download -x
		rm download/build.tar.xz.*
		set -f
	fi
	if [ -e download/build.tar.xz ]; then
		xz -d < download/build.tar.xz | tar -C download -x
		rm download/build.tar.xz
	fi
	if [ -e download/null ]; then
		rm download/null
	fi
done < "$releases"

truncate -s 0 pkgs depends

find download -name "*.deb" | sort | while read -r pkg; do
	control="$(dpkg-deb -I "$pkg" control)"
	awk -F ': ' '$1 == "Package" { print $2 }' <<< "$control" | awk '{ print $1; print $1 ":amd64"; print $1 ":arm64" }' >> pkgs
	awk -F ': ' '$1 == "Depends" || $1 == "Pre-Depends" { print $2 }' <<< "$control" | tr ',' '\n' | awk '{ print $1; print $1 ":amd64"; print $1 ":arm64" }' >> depends

	hash="$(sha256sum < "$pkg" | head -c 64)"
	mkdir -p "$target/pool/$hash"
	cp --update=none "$pkg" "$target/pool/$hash/"
done

find download -name "*.dsc" | sort | while read -r src; do
	hash="$(sha256sum < "$src" | head -c 64)"
	mkdir -p "$target/pool/$hash"
	cp --update=none "$src" "$target/pool/$hash/$(basename "$src")"
	awk '/^Files:$/ { flag = 1; next } !/^ / { flag = 0; } flag { print $3 }' < "$src" | while read f; do
		cp --update=none "download/$f" "$target/pool/$hash/$f"
	done
done

rm -rf download
sort -o pkgs -u pkgs

awk '{ print $1; print $1 ":amd64"; print $1 ":arm64" }' < "$import_list" >> depends
aptitude search '?priority(required)|?priority(important)' -F '%p' -q | cut -d : -f 1 >> depends

sort -o depends -u depends
comm -23 depends pkgs > needed

xargs apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances < needed | grep '^\w' | sort | uniq > recursive_depends

# double evaluation needed to work around broken dependency definitions in Debian lacking proper :any specifiers in _all packages
awk '{ print $1; print $1 ":amd64"; print $1 ":arm64" }' < recursive_depends > recursive_depends_extended
xargs apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances < recursive_depends_extended | grep '^\w' | sort | uniq > recursive_depends_real

comm -23 recursive_depends_real pkgs | { grep -v -x -f "$exclude_patterns" || true; } > recursive_needed

mkdir apt_download
(cd apt_download && xargs apt-get download) < recursive_needed
(cd apt_download && xargs apt-get source --download-only) < recursive_needed

find apt_download -name "*.deb" | while read -r pkg; do
	hash="$(sha256sum < "$pkg" | head -c 64)"
	mkdir -p "$target/pool/$hash"
	cp --update=none "$pkg" "$target/pool/$hash/"
	rm "$pkg"
done

find apt_download -name "*.dsc" | while read -r src; do
	hash="$(sha256sum < "$src" | head -c 64)"
	mkdir -p "$target/pool/$hash"
	cp --update=none "$src" "$target/pool/$hash/$(basename "$src")"
	awk '/^Files:$/ { flag = 1; next } !/^ / { flag = 0; } flag { print $3 }' < "$src" | while read f; do
		cp --update=none "apt_download/$f" "$target/pool/$hash/$f"
	done
done

rm -rf apt_download
