# Tests artifacts already uploaded to S3
name: platform tests only
on:
  # triggered manually
  workflow_dispatch:
    inputs:
      version:
        description: "Garden Linux Version: version passed to glrd"
        type: string
        default: latest
      build:
        description: "Build for version 'today' instead of downloading version from S3"
        type: boolean
        default: false
      platform_test_tag:
        description: "Tag to run platform-test containers. 'nightly', Full commitish or GL version. Tag must be available in ghcr.io/gardenlinux/gardenlinux/platform-test-*"
        type: string
        required: true
        default: "nightly"
      flavors_parse_params:
        description: 'Run bin/parse_flavors.py with these parameters'
        default: '--no-arch --json-by-arch --publish --test-platform'
        type: string

jobs:
  build:
    if: ${{ inputs.build == true }}
    uses: ./.github/workflows/build.yml
    permissions:
      id-token: write
      packages: write
    with:
      version: 'today'
      use_kms: false
      flavors_parse_params_images: '${{ inputs.flavors_parse_params }}'
      flavors_parse_params_bare: '--exclude "*" --no-arch --json-by-arch'
    secrets:
      aws_region: ${{ secrets.AWS_REGION }}
      aws_oidc_session: ${{ secrets.AWS_OIDC_SESSION }}
  generate_matrix_test_platform:
    uses: ./.github/workflows/generate_matrix.yml
    with: 
      flags: '${{ inputs.flavors_parse_params }}'
  platform_test_images:
    name: platform test images
    uses: ./.github/workflows/platform-test-images.yml
    with:
      gl_version: ${{ inputs.platform_test_tag }}
  platform_tests:
    name: platform test
    needs: [ build, generate_matrix_test_platform, platform_test_images ]
    env:
      gcp_project_id: ${{ secrets.GCP_PROJECT }}
      gcp_region: ${{ secrets.GCP_REGION }}
      gcp_zone: ${{ secrets.GCP_ZONE }}
      aws_region: ${{ secrets.AWS_TESTS_REGION }}
      AZURE_CONFIG_DIR: /tmp/azure_config_dir
      ARCH: ${{ matrix.arch }}
      FLAVOR: ${{ matrix.flavor }}
      artifact_dir: /tmp/gardenlinux-build-artifacts
      image_dir: .build # default directory in tofu
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write
      packages: write
    environment: oidc_platform_tests
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_matrix_test_platform.outputs.matrix) }}
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1

      # - name: set VERSION=${{ inputs.version }}
      #   run: |
      #     bin/garden-version "${{ inputs.version }}" | tee VERSION
      #     git update-index --assume-unchanged VERSION

    - name: get cname
      run: |
        if [[ "${{ inputs.build }}" == "true" ]]; then
          if [[ "${{ inputs.version }}" == "latest" ]]; then
            VERSION="$(bin/glrd --latest --fields 'Version' --no-header --type patch)"
            SHA="$(bin/glrd --latest --fields 'Git\ Commit' --no-header --type patch)"
          else
            VERSION="$(bin/glrd --fields 'Version' --no-header --type patch,nightly,dev --version ${{ inputs.version }} | tail -1)"
            SHA="$(bin/glrd --fields 'Git\ Commit' --no-header --type patch,nightly,dev --version ${{ inputs.version }} | tail -1)"
          fi
          echo "${VERSION}" >VERSION
          echo "${SHA}" >COMMIT
        else
          echo today >VERSION
          echo $(git rev-parse --short HEAD) >COMMIT
        fi
        cname="$(./build --resolve-cname ${FLAVOR}-${ARCH})"
        echo "cname=$cname" | tee -a "$GITHUB_ENV"

    # always auth as we use account in tofu
    - id: 'auth_gcp'
      name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@62cf5bd3e4211a0a0b51f2c6d6a37129d828611d # pin@v1
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
        create_credentials_file: true
        cleanup_credentials: true
        export_environment_variables: true

    # always auth as we download from S3
    - id: 'auth_aws'
      name: 'Authenticate to AWS'
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # pin@v4
      with:
        role-to-assume: ${{ secrets.AWS_TESTS_IAM_ROLE }}
        role-session-name: ${{ secrets.AWS_TEST_OIDC_SESSION }}
        aws-region: ${{ secrets.AWS_TESTS_REGION }}
        output-credentials: true

    # always auth as we use subscription in tofu
    - id: 'auth_azure'
      name: 'Authenticate to Azure'
      uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # pin@v2.2.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - id: 'auth_ali'
      name: 'Create ali cloud credential file'
      run: |
        base64 -d <<< "${{ secrets.CCC_CREDENTIALS }}" | .github/workflows/ali_credentials.jq > ali-service-account.json
        ALIBABA_CLOUD_ACCESS_KEY_ID="$(jq -r '.profiles[0].access_key_id' < ali-service-account.json)"
        ALIBABA_CLOUD_ACCESS_KEY_SECRET="$(jq -r '.profiles[0].access_key_secret' < ali-service-account.json)"
        echo "::add-mask::${ALIBABA_CLOUD_ACCESS_KEY_ID}"
        echo "::add-mask::${ALIBABA_CLOUD_ACCESS_KEY_SECRET}"
        echo "ALIBABA_CLOUD_ACCESS_KEY_ID=${ALIBABA_CLOUD_ACCESS_KEY_ID}" >> ${GITHUB_ENV}
        echo "ALIBABA_CLOUD_ACCESS_KEY_SECRET=${ALIBABA_CLOUD_ACCESS_KEY_SECRET}" >> ${GITHUB_ENV}


    - name: download artifact to test from S3 bucket
      if: ${{ inputs.build == false }}
      run: |
        mkdir -p "${{ env.cname }}"
        aws s3 cp "s3://${{ secrets.AWS_S3_BUCKET }}/objects/${{ env.cname }}" "${{ env.artifact_dir }}" --recursive

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # pin@v4.1.8
      if: ${{ inputs.build == true }}
      with:
        name: build-${{ env.cname }}
        path: ${{ env.artifact_dir }}

    # - name: pack build artifacts for tests
    #   run: |
    #     mkdir -p "${{ env.artifact_dir }}"
    #     tar -cvf - -C "${{ env.cname }}" . | gzip -1 - > "${{ env.artifact_dir }}/${{ env.cname }}.tar.gz"

    - name: deploy platform test resources for ${{ matrix.platform }} on ${{ matrix.arch }} ${{ matrix.flavor }}
      run: |
        export AWS_ACCESS_KEY_ID=${{ steps.auth_aws.outputs.aws-access-key-id }}
        export AWS_SECRET_ACCESS_KEY=${{ steps.auth_aws.outputs.aws-secret-access-key }}
        export AWS_SESSION_TOKEN=${{ steps.auth_aws.outputs.aws-session-token }}
        export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
        export ARM_USE_OIDC=true
        credentials_file_name="$(echo "$GOOGLE_APPLICATION_CREDENTIALS" | xargs basename)"
        export GOOGLE_APPLICATION_CREDENTIALS="/gardenlinux/$credentials_file_name"
        export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE="/gardenlinux/$credentials_file_name"
        export GOOGLE_GHA_CREDS_PATH="/gardenlinux/$credentials_file_name"
        export TF_ENCRYPTION="$(base64 -d <<< ${{ secrets.tf_encryption }})"
        export TF_VAR_gcp_project_id=${{ secrets.GCP_PROJECT }}
        # copy artifacts_dir to image_dir
        cp -r ${{ env.artifact_dir }}/* ${{ env.image_dir }}
        ls -la ${{ env.image_dir }}
        # ssh key generation (if missing)
        test -f ~/.ssh/id_ed25519 || ssh-keygen -t ed25519 -P "" -f ~/.ssh/id_ed25519
        # tf variables generation
        TEST_PREFIX="gh-actions" CNAME="${{ env.cname }}" make --directory=tests/platformSetup ${FLAVOR}-${ARCH}-config
        # enable S3 backend
        cp "tests/platformSetup/tofu/backend.tf.github" "tests/platformSetup/tofu/backend.tf" 
        make --directory="tests/platformSetup" ${FLAVOR}-${ARCH}-apply 2>&1 | tee "${{ env.artifact_dir}}/${{ env.cname }}.platform.provisioning.log"

    - name: run platform test for ${{ matrix.platform }} on ${{ matrix.arch }}
      run: |
        make --directory=tests ${FLAVOR}-${ARCH}-test-platform 2>&1 | tee "${{ env.artifact_dir}}/${{ env.cname }}.platform.test.log"

    # - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # pin@v4.4.0
    #   with:
    #     name: platform-test-${{ env.cname }}
    #     path: |
    #       ${{ env.artifact_dir }}/${{ env.cname }}.platform.test.log
    #       ${{ env.artifact_dir }}/${{ env.cname }}.platform.test.xml
    
    - name: cleanup platform test for ${{ matrix.platform }} on ${{ matrix.arch }} ${{ matrix.flavor }}
      if: always()
      run: |
        export AWS_ACCESS_KEY_ID=${{ steps.auth_aws.outputs.aws-access-key-id }}
        export AWS_SECRET_ACCESS_KEY=${{ steps.auth_aws.outputs.aws-secret-access-key }}
        export AWS_SESSION_TOKEN=${{ steps.auth_aws.outputs.aws-session-token }}
        export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
        export ARM_USE_OIDC=true
        credentials_file_name="$(echo "$GOOGLE_APPLICATION_CREDENTIALS" | xargs basename)"
        export GOOGLE_APPLICATION_CREDENTIALS="/gardenlinux/$credentials_file_name"
        export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE="/gardenlinux/$credentials_file_name"
        export GOOGLE_GHA_CREDS_PATH="/gardenlinux/$credentials_file_name"
        export TF_ENCRYPTION="$(base64 -d <<< ${{ secrets.tf_encryption }})"
        export TF_VAR_gcp_project_id=${{ secrets.GCP_PROJECT }}
        (make --directory="tests/platformSetup" ${FLAVOR}-${ARCH}-destroy 2>&1 || make --directory="tests/platformSetup" ${FLAVOR}-${ARCH}-destroy 2>&1 || make --directory="tests/platformSetup" ${FLAVOR}-${ARCH}-destroy 2>&1) | tee "${{ env.artifact_dir}}/${{ env.cname }}.platform.destroy.log"
