name: test_flavor
on:
  workflow_call:
    inputs:
      arch:
        type: string
        default: "amd64"
      flavor:
        type: string
        required: true
    secrets:
      gcp_identity_provider:
        required: true
      gcp_service_account:
        required: true
      gcp_project_id:
        required: true
      gcp_region:
        required: true
      gcp_zone:
        required: true
      aws_role:
        required: true
      aws_session:
        required: true
      aws_region:
        required: true
      aws_s3_bucket:
        required: true
      az_client_id:
        required: true
      az_tenant_id:
        required: true
      az_subscription_id:
        required: true
      ccc_credentials:
        required: true
      tf_encryption:
        required: true
jobs:
  test:
    name: Test-NG flavor in Cloud ${{ inputs.flavor }} (${{ inputs.arch }})
    runs-on: "ubuntu-24.04"
    # timeout-minutes: 30
    environment: oidc_platform_tests
    defaults:
      run:
        shell: bash
    env:
      CNAME: ""
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      id-token: write
      actions: write
    steps:
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo env DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends podman make curl jq unzip qemu-utils retry
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0
        with:
          submodules: true
      - uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # pin@v4.3.0
        with:
          path: |
            COMMIT
            VERSION
          key: build-${{ inputs.flavor }}-${{ inputs.arch }}-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: Download test distribution artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # pin@v5.0.0
        with:
          name: test-distribution
          path: tests-ng/.build
      - name: Load certs artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # pin@v5.0.0
        with:
          name: certs
          path: cert/
      - name: Determine CNAME
        id: cname
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/features_parse@2c47ca58891eefa3587954fadf59153317ad9e0c # pin@0.10.2
        with:
          flags: --cname ${{ inputs.flavor }}-${{ inputs.arch }} cname
      - name: Set CNAME
        run: |
          echo "CNAME=${{ steps.cname.outputs.result }}" | tee -a "$GITHUB_ENV"
      - name: Set CLOUD
        run: |
          echo "CLOUD=${CNAME%%-*}" | tee -a "$GITHUB_ENV"
      - name: Load flavor build artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # pin@v5.0.0
        with:
          name: build-${{ inputs.flavor }}-${{ inputs.arch }}
      - name: unpack build artifacts
        run: |
          mkdir ".build"
          tar -C .build -xzf $CNAME.tar.gz
          rm "$CNAME.tar.gz"
          tree .build
      - name: "Authenticate to Google Cloud"
        if: ${{ startsWith(inputs.flavor, 'gcp-') }}
        uses: google-github-actions/auth@140bb5113ffb6b65a7e9b937a81fa96cf5064462 # pin@v1
        with:
          workload_identity_provider: ${{ secrets.gcp_identity_provider }}
          service_account: ${{ secrets.gcp_service_account }}
          create_credentials_file: true
          cleanup_credentials: true
          export_environment_variables: true
      - name: Set GCP platform-test environment
        if: ${{ startsWith(inputs.flavor, 'gcp-') }}
        uses: actions/github-script@v8
        with:
          script: |
            // tf provider vars
            core.exportVariable("GOOGLE_PROJECT", "${{ secrets.gcp_project_id }}");
            core.exportVariable("GOOGLE_REGION", "${{ secrets.gcp_region }}");
            core.exportVariable("GOOGLE_ZONE", "${{ secrets.gcp_zone }}");
      - id: "auth_aws"
        name: "Authenticate to AWS"
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # pin@v4
        with:
          role-to-assume: ${{ secrets.aws_role }}
          role-session-name: ${{ secrets.aws_session }}
          aws-region: ${{ secrets.aws_region }}
          output-credentials: true
      - name: Set AWS platform-test environment
        if: ${{ startsWith(inputs.flavor, 'aws-') }}
        uses: actions/github-script@v8
        with:
          script: |
            // tf provider auth
            core.setSecret("${{ steps.auth_aws.outputs.aws-access-key-id }}");
            core.exportVariable("AWS_ACCESS_KEY_ID", "${{ steps.auth_aws.outputs.aws-access-key-id }}");
            core.setSecret("${{ steps.auth_aws.outputs.aws-secret-access-key }}");
            core.exportVariable("AWS_SECRET_ACCESS_KEY", "${{ steps.auth_aws.outputs.aws-secret-access-key }}");
            core.setSecret("${{ steps.auth_aws.outputs.aws-session-token }}");
            core.exportVariable("AWS_SESSION_TOKEN", "${{ steps.auth_aws.outputs.aws-session-token }}");
            // tf provider vars
            core.exportVariable("AWS_REGION", "${{ secrets.aws_region }}");
      - id: "auth_azure"
        if: ${{ startsWith(inputs.flavor, 'azure-') }}
        name: "Authenticate to Azure"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # pin@v1
        with:
          client-id: ${{ secrets.az_client_id }}
          tenant-id: ${{ secrets.az_tenant_id }}
          subscription-id: ${{ secrets.az_subscription_id }}
      - name: Set Azure platform-test environment
        if: ${{ startsWith(inputs.flavor, 'azure-') }}
        uses: actions/github-script@v8
        with:
          script: |
            // tf provider auth
            core.exportVariable("ARM_USE_OIDC", "true");
            core.exportVariable("AZURE_CONFIG_DIR", "$RUNNER_TEMP/azure_config_dir");
            core.setSecret("${{ secrets.az_client_id }}");
            core.exportVariable("ARM_CLIENT_ID", "${{ secrets.az_client_id }}");
            core.setSecret("${{ secrets.az_subscription_id }}");
            core.exportVariable("ARM_SUBSCRIPTION_ID", "${{ secrets.az_subscription_id }}");
            core.setSecret("${{ secrets.az_tenant_id }}");
            // tf provider vars
            core.exportVariable("ARM_TENANT_ID", "${{ secrets.az_tenant_id }}");
      - name: "Create ali cloud credential file"
        if: ${{ startsWith(inputs.flavor, 'ali-') }}
        uses: actions/github-script@v8
        with:
          script: |
            // tf provider auth
            const credentials = JSON.parse(atob("${{ secrets.ccc_credentials }}"));
            const aliCredentials = credentials.alicloud["gardenlinux-platform-test"];
            core.setSecret(aliCredentials.access_key_id);
            core.exportVariable("ALIBABA_CLOUD_ACCESS_KEY_ID", aliCredentials.access_key_id);
            core.setSecret(aliCredentials.access_key_secret);
            core.exportVariable("ALIBABA_CLOUD_ACCESS_KEY_SECRET", aliCredentials.access_key_secret);
            // tf provider vars
            core.exportVariable("ALIBABA_CLOUD_REGION", aliCredentials.region);
        # TODO: handle skipping better
      - name: New Test Framework
        run: |
          if [ ! -e ".build/$CNAME.raw" ]; then
            if [ -e ".build/$CNAME.vhd" ]; then
              echo "converting vhd to raw"
              qemu-img convert -f vpc -O raw ".build/$CNAME.vhd" ".build/$CNAME.raw"
            elif [ -e ".build/$CNAME.qcow2" ]; then
              echo "converting qcow2 to raw"
              qemu-img convert -f qcow2 -O raw ".build/$CNAME.qcow2" ".build/$CNAME.raw"
            elif [ -e ".build/$CNAME.gcpimage.tar.gz" ]; then
              echo "converting gcpimage to raw"
              tar -C .build -xzf ".build/$CNAME.gcpimage.tar.gz"
              mv ".build/disk.raw" ".build/$CNAME.raw"
            fi
          fi
          if [ -e ".build/$CNAME.raw" ]; then
            # enable remote state S3 backend
            cp "tests-ng/util/tf/backend.tf.github" "tests-ng/util/tf/backend.tf"

            # enable state encryption
            export TF_ENCRYPTION="$(base64 -d <<< ${{ secrets.tf_encryption }})"

            # run test
            export TF_VAR_prefix="gh-${{ github.run_id }}"
            ./test-ng --cloud $CLOUD ".build/$CNAME.raw"

          else
            echo "no raw file, cloud test failed"
            exit 1
          fi
      - name: Copy test results to build directory
        if: always()
        run: |
          cp tests-ng/log/cloud.test-ng.log .build/${CNAME}.cloud.test-ng.log || true
          cp tests-ng/log/cloud.test-ng.xml .build/${CNAME}.cloud.test-ng.xml || true
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin@v4.6.2
        if: always()
        with:
          if-no-files-found: ignore
          name: cloud-test-ng-${{ env.CNAME }}
          path: |
            .build/${{ env.CNAME }}.cloud.test-ng.log
            .build/${{ env.CNAME }}.cloud.test-ng.xml
      - name: Cleanup cloud test for ${{ inputs.flavor }} (${{ inputs.arch }})
        if: always()
        run: |
          # enable remote state S3 backend
          cp "tests-ng/util/tf/backend.tf.github" "tests-ng/util/tf/backend.tf"

          # enable state encryption
          export TF_ENCRYPTION="$(base64 -d <<< ${{ secrets.tf_encryption }})"

          # run cleanup
          export TF_VAR_prefix="gh-${{ github.run_id }}"
          ./test-ng --cloud $CLOUD --only-cleanup ".build/$CNAME.raw" || true
