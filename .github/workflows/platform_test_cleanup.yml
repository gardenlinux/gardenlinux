name: Platform Test Cleanup
on:
  schedule:
    - cron: '0 4 * * *'  # Run daily at 4 AM UTC
  # manual trigger
  workflow_dispatch:

jobs:
  collect_workspaces:
    name: Collect Workspaces to Cleanup
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    environment: oidc_platform_tests
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - id: 'auth_aws'
        name: 'Authenticate to AWS'
        uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9 # pin@v4
        with:
          role-to-assume: ${{ secrets.AWS_TESTS_IAM_ROLE }}
          role-session-name: ${{ secrets.AWS_TESTS_OIDC_SESSION }}
          aws-region: ${{ secrets.AWS_TESTS_REGION }}

      - name: Find Old OpenTofu Workspaces
        id: set-matrix
        run: |
          # List objects older than 1 day and extract workspace names
          WORKSPACES=$(aws s3api list-objects-v2 \
            --bucket gardenlinux-dev-gh-actions-tfstate \
            --query "Contents[?LastModified<='`date -d '1 day ago' --iso-8601=seconds`'].Key" \
            --output json | jq -r '.[]' | grep "^env:/" | \
            sed -E 's|env:/([^/]+)/terraform.tfstate|\1|' | grep -v ^tfstate | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${WORKSPACES}" >> $GITHUB_OUTPUT

  cleanup:
    needs: collect_workspaces
    if: ${{ needs.collect_workspaces.outputs.matrix != '[]' && needs.collect_workspaces.outputs.matrix != '' }}
    name: Cleanup Workspace
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    environment: oidc_platform_tests
    env:
      IMAGE: ghcr.io/gardenlinux/gardenlinux/platform-test-tofu:latest

    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.collect_workspaces.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Get platform from workspace
        uses: actions/github-script@v7
        id: platform_from_cname
        with:
          script: |
            const gitHubLib = await import("${{ github.workspace }}/.github/workflows/github.mjs");

            const workspace = "${{ matrix.workspace }}";
            return gitHubLib.getPlatformForCName(workspace.slice(0, workspace.lastIndexOf("-")));
          result-encoding: string
      - if: ${{ steps.platform_from_cname.outputs.result == 'gcp' }}
        id: auth_gcp
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@71f986410dfbc7added4569d411d040a91dc6935 # pin@v1
        with:
          workload_identity_provider: ${{ secrets.gcp_identity_provider }}
          service_account: ${{ secrets.gcp_service_account }}
          create_credentials_file: true
          cleanup_credentials: true
          export_environment_variables: true
      - if: ${{ steps.platform_from_cname.outputs.result == 'gcp' }}
        name: Set GCP platform-test environment
        uses: actions/github-script@v7
        with:
          script: |
            const basePath = "/gardenlinux/";
            const credentialsFileName = path.basename(process.env.GOOGLE_APPLICATION_CREDENTIALS);

            core.exportVariable("GOOGLE_APPLICATION_CREDENTIALS", basePath + credentialsFileName);
            core.exportVariable("CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE", basePath + credentialsFileName);
            core.exportVariable("GOOGLE_GHA_CREDS_PATH", basePath + credentialsFileName);
      - if: ${{ steps.platform_from_cname.outputs.result == 'aws' }}
        id: auth_aws
        name: 'Authenticate to AWS'
        uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9 # pin@v4
        with:
          role-to-assume: ${{ secrets.aws_role }}
          role-session-name: ${{ secrets.aws_session }}
          aws-region: ${{ secrets.aws_region }}
          output-credentials: true
      - if: ${{ steps.platform_from_cname.outputs.result == 'aws' }}
        name: Set AWS platform-test environment
        uses: actions/github-script@v7
        with:
          script: |
            core.setSecret("AWS_ACCESS_KEY_ID");
            core.exportVariable("AWS_ACCESS_KEY_ID", "${{ steps.auth_aws.outputs.aws-access-key-id }}");
            core.setSecret("AWS_SECRET_ACCESS_KEY");
            core.exportVariable("AWS_SECRET_ACCESS_KEY", "${{ steps.auth_aws.outputs.aws-secret-access-key }}");
            core.setSecret("AWS_SESSION_TOKEN");
            core.exportVariable("AWS_SESSION_TOKEN", "${{ steps.auth_aws.outputs.aws-session-token }}");
      - if: ${{ steps.platform_from_cname.outputs.result == 'azure' }}
        id: auth_azure
        name: 'Authenticate to Azure'
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # pin@v1
        with:
          client-id: ${{ secrets.az_client_id }}
          tenant-id: ${{ secrets.az_tenant_id }}
          subscription-id: ${{ secrets.az_subscription_id }}
      - if: ${{ steps.platform_from_cname.outputs.result == 'azure' }}
        name: Set Azure platform-test environment
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable("ARM_USE_OIDC", "true");

            core.setSecret("ARM_CLIENT_ID");
            core.exportVariable("ARM_CLIENT_ID", "${{ secrets.az_client_id }}");
            core.setSecret("ARM_SUBSCRIPTION_ID");
            core.exportVariable("ARM_SUBSCRIPTION_ID", "${{ secrets.az_subscription_id }}");
            core.setSecret("ARM_TENANT_ID");
            core.exportVariable("ARM_TENANT_ID", "${{ secrets.az_tenant_id }}");
      - if: ${{ steps.platform_from_cname.outputs.result == 'ali' }}
        id: auth_ali
        name: 'Create ali cloud credential file'
        uses: actions/github-script@v7
        with:
          script: |
            const aliCredentials = JSON.parse(atob("${{ secrets.ccc_credentials }}"));

            core.exportVariable("ALIBABA_CLOUD_REGION", aliCredentials["gardenlinux-platform-test"].region;

            core.setSecret("ALIBABA_CLOUD_ACCESS_KEY_ID");
            core.exportVariable("ALIBABA_CLOUD_ACCESS_KEY_ID", aliCredentials["gardenlinux-platform-test"].access_key_id);
            core.setSecret("ALIBABA_CLOUD_ACCESS_KEY_SECRET");
            core.exportVariable("ALIBABA_CLOUD_ACCESS_KEY_SECRET", aliCredentials["gardenlinux-platform-test"].access_key_secret;
      - name: Setup Environment
        run: |
          # ssh key generation (if missing)
          test -f ~/.ssh/id_ed25519 || ssh-keygen -t ed25519 -P "" -f ~/.ssh/id_ed25519
          # secureboot certificate files
          mkdir -p cert
          touch cert/secureboot.db.crt cert/secureboot.pk.der cert/secureboot.db.der cert/secureboot.kek.der cert/secureboot.aws-efivars
          # create directories for credentials
          mkdir -p ~/.aws ~/.azure ~/.aliyun ~/.config/gcloud

      - name: Destroy OpenTofu Resources and delete workspaces
        run: |
          export TF_ENCRYPTION="$(base64 -d <<< ${{ secrets.TF_ENCRYPTION }})"
          export TF_VAR_gcp_project_id=${{ secrets.GCP_PROJECT }}

          workspace="${{ matrix.workspace }}"
          flavor="${workspace%-????????}"
          echo "Processing workspace: $workspace"
          echo "flavor: $flavor"

          podman run --rm \
            -v ${PWD}:/gardenlinux \
            -v ~/.ssh:/root/.ssh:ro \
            -e "TF_*" \
            -v ~/.aliyun:/root/.aliyun -e "ALIBABA_*" \
            -v ~/.aws:/root/.aws -e "AWS_*" \
            -v ~/.azure:/root/.azure -e "azure_*" -e "ARM_*" -e "ACTIONS_*" \
            -v ~/.config/gcloud:/root/.config/gcloud -e "GOOGLE_*" -e "CLOUDSDK_*" \
            ${IMAGE} \
            bash -c "
              cd /gardenlinux/tests/platformSetup/tofu && \
              if [ ! -f backend.tf ]; then cp backend.tf.github backend.tf; tofu init; fi && \
              ../platformSetup.py --provisioner tofu --test-prefix gh-actions --flavor ${flavor} --create-tfvars && \
              tofu workspace select ${workspace} && \
              tofu destroy -var-file variables.${flavor}.tfvars -auto-approve && \
              tofu workspace select default && \
              tofu workspace delete ${workspace}
            "
