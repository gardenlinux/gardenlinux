name: tests
on:
  # triggered by other workflows
  workflow_call:
    inputs:
      flavors_matrix:
        description: "Generated GitHub workflow flavors matrix"
        type: string
        required: true
      test_types:
        description: "Types of tests to execute (comma-separated: chroot,qemu,cloud,oci)"
        type: string
        default: "chroot,qemu"
      bare_flavors_matrix:
        description: "Generated GitHub workflow flavors matrix for bare flavors"
        type: string
        default: '{"include":[]}'
    secrets:
      gcp_identity_provider:
        required: false
      gcp_service_account:
        required: false
      gcp_project_id:
        required: false
      gcp_region:
        required: false
      gcp_zone:
        required: false
      aws_role:
        required: false
      aws_session:
        required: false
      aws_region:
        required: false
      aws_s3_bucket:
        required: false
      az_client_id:
        required: false
      az_tenant_id:
        required: false
      az_subscription_id:
        required: false
      ccc_credentials:
        required: false
      tf_encryption:
        required: false
jobs:
  chroot_test_flavors_supported_matrix:
    name: Generate flavors matrix for chroot test
    uses: ./.github/workflows/build_flavors_matrix.yml
    with:
      flags: "--no-arch --json-by-arch --test"
  qemu_test_flavors_supported_matrix:
    name: Generate flavors matrix for qemu test
    uses: ./.github/workflows/build_flavors_matrix.yml
    with:
      flags: "--no-arch --json-by-arch --test --exclude vmware-*"
  platform_test_flavors_supported_matrix:
    name: Generate flavors matrix for platform-test
    uses: ./.github/workflows/build_flavors_matrix.yml
    with:
      flags: "--no-arch --json-by-arch --test-platform"
  bare_flavors_supported_matrix:
    name: Generate flavors matrix for bare flavors test
    uses: ./.github/workflows/build_flavors_matrix.yml
    with:
      flags: '--include-only "bare-*" --no-arch --json-by-arch --test'
  intersect_matrices:
    needs:
      [
        chroot_test_flavors_supported_matrix,
        qemu_test_flavors_supported_matrix,
        platform_test_flavors_supported_matrix,
        bare_flavors_supported_matrix,
      ]
    name: Intersect test matrices
    runs-on: "ubuntu-24.04"
    defaults:
      run:
        shell: bash
    outputs:
      chroot_test_flavors_matrix: ${{ steps.matrices.outputs.chroot_test_flavors_matrix }}
      qemu_test_flavors_matrix: ${{ steps.matrices.outputs.qemu_test_flavors_matrix }}
      platform_test_flavors_matrix: ${{ steps.matrices.outputs.platform_test_flavors_matrix }}
      bare_flavors_matrix: ${{ steps.matrices.outputs.bare_flavors_matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0
        with:
          submodules: true
      - id: matrices
        name: Calculate matrices
        uses: actions/github-script@v8
        with:
          script: |
            const gitHubLib = await import("${{ github.workspace }}/.github/workflows/github.mjs");

            // chroot_test_flavors_matrix
            let matrix = gitHubLib.intersectFlavorsMatrix(
              ${{ inputs.flavors_matrix }},
              ${{ needs.chroot_test_flavors_supported_matrix.outputs.matrix }}
            );

            core.setOutput("chroot_test_flavors_matrix", matrix);

            // qemu_test_flavors_matrix
            matrix = gitHubLib.intersectFlavorsMatrix(
              ${{ inputs.flavors_matrix }},
              ${{ needs.qemu_test_flavors_supported_matrix.outputs.matrix }}
            );

            core.setOutput("qemu_test_flavors_matrix", matrix);

            // platform_test_flavors_matrix
            matrix = gitHubLib.intersectFlavorsMatrix(
              ${{ inputs.flavors_matrix }},
              ${{ needs.platform_test_flavors_supported_matrix.outputs.matrix }}
            );

            core.setOutput("platform_test_flavors_matrix", matrix);

            // bare_flavors_matrix
            matrix = gitHubLib.intersectFlavorsMatrix(
              ${{ inputs.bare_flavors_matrix }},
              ${{ needs.bare_flavors_supported_matrix.outputs.matrix }}
            );

            core.setOutput("bare_flavors_matrix", matrix);
  ## test-ng start
  test_flavors_chroot_ng:
    needs: intersect_matrices
    name: Test-NG flavors chroot
    uses: ./.github/workflows/test_flavor_chroot_ng.yml
    if: ${{ needs.intersect_matrices.outputs.chroot_test_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'chroot') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.chroot_test_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    permissions:
      actions: write
  test_flavors_qemu:
    needs: intersect_matrices
    name: Test-NG flavors QEMU
    uses: ./.github/workflows/test_flavor_qemu.yml
    if: ${{ needs.intersect_matrices.outputs.qemu_test_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'qemu') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.qemu_test_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    permissions:
      actions: write
  test_flavors_cloud_ng:
    needs: [intersect_matrices, test_flavors_qemu]
    name: Test-NG flavors Cloud
    uses: ./.github/workflows/test_flavor_cloud_ng.yml
    if: ${{ needs.intersect_matrices.outputs.platform_test_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'cloud') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.platform_test_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    secrets: inherit
    permissions:
      id-token: write
      actions: write
  test_flavors_oci_ng:
    needs: intersect_matrices
    name: Test-NG flavors OCI
    uses: ./.github/workflows/test_flavor_oci_ng.yml
    if: ${{ needs.intersect_matrices.outputs.bare_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'oci') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.bare_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    permissions:
      actions: write
  ## test-ng end
  test_flavors_chroot:
    needs: intersect_matrices
    name: Test-NG flavors chroot
    uses: ./.github/workflows/test_flavor_chroot.yml
    if: ${{ needs.intersect_matrices.outputs.chroot_test_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'chroot') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.chroot_test_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    permissions:
      actions: write
  test_flavors_cloud:
    needs: [intersect_matrices, test_flavors_qemu]
    name: Test flavors cloud
    uses: ./.github/workflows/test_flavor_cloud.yml
    if: ${{ needs.intersect_matrices.outputs.platform_test_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'cloud') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.platform_test_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    secrets: inherit
    permissions:
      id-token: write
      actions: write
  test_flavors_oci:
    needs: intersect_matrices
    name: Test flavors OCI
    uses: ./.github/workflows/test_flavor_oci.yml
    if: ${{ needs.intersect_matrices.outputs.bare_flavors_matrix != '{"include":[]}' && contains(inputs.test_types, 'oci') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.intersect_matrices.outputs.bare_flavors_matrix) }}
    with:
      arch: ${{ matrix.arch }}
      flavor: ${{ matrix.flavor }}
    permissions:
      actions: write
