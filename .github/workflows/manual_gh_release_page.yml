name: release page
on:
  workflow_dispatch:
    inputs:
      type:
        type: choice
        default: patch
        options:
        - patch
        - dev
      version:
        required: true
        type: string
      is_latest:
        default: false
        type: boolean
        description: "Tag as gardenlinux:latest"
      commit:
        required: true
        type: string
        description: "Full commitish"
jobs:
  # Create new version in GLVD so it has the package list of the new release
  # This is needed for the automatic changelog generation
  glvd:
    if: ${{ inputs.type }} == 'patch'
    name: Update GLVD distro list
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # This is required for requesting the JWT
      id-token: write
    needs:
      - glrd
    steps:
      - name: Get OIDC token
        id: get-token
        run: |
          IDTOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=glvd" | jq -r '.value')
          echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
      - uses: azure/k8s-set-context@v4
        with:
           method: kubeconfig
           kubeconfig: "${{ secrets.KUBECONFIG }}"
      - name: Start a new ingestion job in GLVD to import package list for new version
        run: |
          kubectl run ingest-new-gl-version-$RANDOM \
              --image=ghcr.io/gardenlinux/glvd-data-ingestion:latest \
              --env=PGDATABASE=glvd \
              --env=PGUSER=$(kubectl get secret/postgres-credentials --template="{{.data.username}}" | base64 -d) \
              --env=PGHOST=glvd-database-0.glvd-database \
              --env=PGPORT=5432 \
              --env=PGPASSWORD=$(kubectl get secret/postgres-credentials --template="{{.data.password}}" | base64 -d) -- /usr/local/src/ingest-single-gl-release.sh ${{ inputs.version }}
      - name: Wait for GLVD to ingest the package list of the new version
        run: |
          VERSION=${{ inputs.version }}
          URL="https://glvd.ingress.glvd.gardnlinux.shoot.canary.k8s-hana.ondemand.com/v1/distro/$VERSION"
          for i in {1..30}; do
              RESPONSE=$(curl -s $URL)
              if [[ $RESPONSE != "[]" ]]; then
                  echo "Non-empty list received: $RESPONSE"
                  break
              fi
              echo "Attempt $i returned an empty list, retrying in 10 seconds..."
              sleep 10
          done

  create_github_release:
    if: ${{ inputs.type }} == 'patch'
    environment: oidc_aws_s3_upload
    needs: glvd
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
      - name: install dependencies for generate_release_note.py script
        run: sudo apt-get update && sudo apt-get install -qy --no-install-recommends python3-boto3
      - name: create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          .github/workflows/release_note.py create --tag ${{ inputs.version }} --commit "$(echo "${{ inputs.commit }}")"
      - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # pin@v4.4.3
        with:
          name: release
          path: .github_release_id
          if-no-files-found: error
          include-hidden-files: true
  upload_to_github_release:
    if: ${{ inputs.type }} == 'patch'
    environment: oidc_aws_s3_upload
    needs: create_github_release
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        architecture: [ amd64, arm64 ]
        cname: [ kvm-gardener_prod, metal-gardener_prod, gcp-gardener_prod, gdch-gardener_prod, aws-gardener_prod, azure-gardener_prod, ali-gardener_prod, openstack-gardener_prod, openstackbaremetal-gardener_prod, vmware-gardener_prod, metal-gardener_prod_pxe ]
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # pin@v4.1.8
        with:
          name: release
      - uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9 # pin@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ${{ secrets.AWS_OIDC_SESSION }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: download build artifacts from S3
        run: |
          commit="$(echo "${{ inputs.commit }}" | cut -c -8)"
          prefix="${{ matrix.cname }}-${{ matrix.architecture }}-${{ inputs.version }}-$commit"
          .github/workflows/download_from_s3.sh "${{ secrets.AWS_S3_BUCKET }}" "$prefix"
          # pack tar.xz file for release
          tar -cv "$prefix" | xz -9 > "$prefix.tar.xz"
      - name: upload to release
        run: |
          commit="$(echo "${{ inputs.commit }}" | cut -c -8)"
          release="$(cat .github_release_id)"
          prefix="${{ matrix.cname }}-${{ matrix.architecture }}-${{ inputs.version }}-$commit"
          echo "$release $prefix.tar.xz"
          ls -lah "$prefix.tar.xz"
          echo "$prefix.tar.xz" | .github/workflows/release-page.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} upload "$release"

          # upload test logs separately (if they exist)
          log_suffixes="chroot.test.log chroot.test.xml platform.test.log platform.test.xml"
          for suffix in $log_suffixes; do
            log="$prefix/$prefix.$suffix"
            if [ -f "$log" ]; then
              echo "$log" | .github/workflows/release-page.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} upload "$release"
            fi
          done

  tag_container_as_latest:
    if: ${{ inputs.type }} == 'patch'
    uses: ./.github/workflows/tag_latest_container.yml
    with:
      version: ${{ inputs.version }}
      is_latest:  ${{ inputs.is_latest }}
  glrd:
    name: create GLRD release
    permissions:
      id-token: write
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9 # pin@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ${{ secrets.AWS_OIDC_SESSION }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create GLRD release
        uses: gardenlinux/glrd@v3
        with:
          cmd: |
            type=${{ inputs.type }}
            commit=${{ inputs.commit }}
            version=${{ inputs.version }}
            major=$(echo ${version} | cut -d'.' -f1)
            minor=$(echo ${version} | cut -d'.' -f2)
            if [ ${type} = "patch" ]; then
              # check for stable version and create if missing
              if ! glrd --no-header --type stable --version ${major}; then
                glrd-manage --s3-update --create stable --version ${major}
              fi
              glrd-manage --s3-update --create patch --version ${version} --commit ${commit}
            elif [ ${type} = "dev" ]; then
              glrd-manage --s3-update --create dev --version ${version} --commit ${commit}
            fi
      - name: Get created GLRD release
        uses: gardenlinux/glrd@v3
        with:
          cmd: |
            version=${{ inputs.version }}
            major=$(echo ${version} | cut -d'.' -f1)
            minor=$(echo ${version} | cut -d'.' -f2)
            glrd --type stable,patch,dev --version ${major}
