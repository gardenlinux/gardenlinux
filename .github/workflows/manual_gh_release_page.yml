name: release page
on:
  workflow_dispatch:
    inputs:
      type:
        type: choice
        default: patch
        description: 'Patch'
        options:
        - patch
        - dev
      version:
        required: true
        type: string
        description: 'Version'
      is_latest:
        default: false
        type: boolean
        description: "Tag Github Release and OCI image as latest"
      commit:
        required: true
        type: string
        description: "Full commitish"
jobs:
  # Create new version in GLVD so it has the package list of the new release
  # This is needed for the automatic changelog generation
  glvd:
    if: ${{ inputs.type }} == 'patch'
    name: Update GLVD distro list
    runs-on: ubuntu-latest
    permissions:
      # This is required for requesting the JWT
      id-token: write
    steps:
      - name: Get OIDC token
        id: get-token
        run: |
          IDTOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=glvd" | jq -r '.value')
          echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
      - uses: azure/k8s-set-context@v4
        with:
           method: kubeconfig
           kubeconfig: "${{ secrets.KUBECONFIG }}"
      - name: Start a new ingestion job in GLVD to import package list for new version
        run: |
          kubectl run ingest-new-gl-version-$RANDOM \
              --namespace default --token "${{ steps.get-token.outputs.idToken }}" \
              --image=ghcr.io/gardenlinux/glvd-data-ingestion:latest \
              --restart=Never \
              --env=PGDATABASE=glvd \
              --env=PGUSER="${{ secrets.GLVD_DB_USERNAME }}" \
              --env=PGHOST=glvd-database-0.glvd-database \
              --env=PGPORT=5432 \
              --env=PGPASSWORD="${{ secrets.GLVD_DB_PASSWORD }}" -- /usr/local/src/ingest-single-gl-release.sh ${{ inputs.version }}
      - name: Wait for GLVD to ingest the package list of the new version
        run: |
          echo "Give GLVD some time to ingest the data. It is not clear how long this takes exactly, and there is no single indicator for when it was done."
          sleep 180
  flavors_matrix:
    needs: glvd
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout flavors of the release commit
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0
        with:
          ref: ${{ inputs.commit }}
          sparse-checkout: |
            flavors.yaml
          sparse-checkout-cone-mode: false
      - id: matrix
        name: Generate flavors matrix
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/flavors_parse@02879bd567ed39b5610332afcc6e46197073db0c # pin@0.10.0
        with:
          flags: '--no-arch --json-by-arch --publish'
  github_release:
    needs: glvd
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write
      contents: write
      actions: write
    environment: oidc_aws_s3_upload
    steps:
      - name: Checkout full repository (current branch)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0
        with:
          submodules: true
          fetch-depth: 0
      - name: install dependencies for generate_release_note.py script
        run: sudo apt-get update && sudo apt-get install -qy --no-install-recommends python3-boto3
      - name: Install python-gardenlinux-lib
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/setup@02879bd567ed39b5610332afcc6e46197073db0c # pin@0.10.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # pin@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ${{ secrets.AWS_OIDC_SESSION }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.is_latest }}" == "true" ]]; then
            .github/workflows/release_note.py create --tag ${{ inputs.version }} --commit "$(echo "${{ inputs.commit }}")" --latest
          else
            .github/workflows/release_note.py create --tag ${{ inputs.version }} --commit "$(echo "${{ inputs.commit }}")"
          fi
      - uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # pin@v4.3.0
        with:
          key: release-${{ github.run_id }}
          path: .github_release_id

  github_release_artifacts_upload:
    needs: [github_release, flavors_matrix]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write
    environment: oidc_aws_s3_upload
    env:
      CNAME: ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.flavors_matrix.outputs.matrix ) }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0
        with:
          submodules: true
      - name: Install python-gardenlinux-lib
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/setup@02879bd567ed39b5610332afcc6e46197073db0c # pin@0.10.0
      - uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # pin@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ${{ secrets.AWS_OIDC_SESSION }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # pin@v4.3.0
        with:
          key: release-${{ github.run_id }}
          path: .github_release_id
          fail-on-cache-miss: true
      - name: Download from S3 bucket ${{ secrets.aws_s3_bucket }} for ${{ matrix.flavor }} (${{ matrix.arch }})
        run: |
          commit="$(echo "${{ inputs.commit }}" | cut -c -8)"
          CNAME="${{ matrix.flavor }}-${{ matrix.arch }}-${{ inputs.version }}-$commit"

          echo "CNAME=$CNAME" | tee -a "$GITHUB_ENV"

          mkdir "$CNAME"
          gl-s3 --bucket ${{ secrets.aws_s3_bucket }} --cname "$CNAME" --path "$CNAME" download-artifacts-from-bucket
          tar -cJf "$CNAME.tar.xz" -C "$CNAME" .
      - name: Upload to release
        run: |
          release="$(cat .github_release_id)"

          echo "$release $CNAME.tar.xz"
          echo "$CNAME.tar.xz" | .github/workflows/release-page.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} upload "$release"

          # upload test logs separately (if they exist)
          log_suffixes="chroot.test.log chroot.test.xml platform.test.log platform.test.xml"
          for suffix in $log_suffixes; do
            log="$CNAME/$CNAME.$suffix"
            if [ -f "$log" ]; then
              echo "$log" | .github/workflows/release-page.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} upload "$release"
            fi
          done

  tag_container_as_latest:
    if: ${{ inputs.type }} == 'patch'
    uses: ./.github/workflows/tag_latest_container.yml
    with:
      version: ${{ inputs.version }}
      is_latest:  ${{ inputs.is_latest }}
    permissions:
      packages: write
  glrd:
    name: create GLRD release
    permissions:
      id-token: write
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # pin@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ${{ secrets.AWS_OIDC_SESSION }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create GLRD release
        uses: gardenlinux/glrd@v3
        with:
          cmd: |
            type=${{ inputs.type }}
            commit=${{ inputs.commit }}
            version=${{ inputs.version }}
            major=$(echo ${version} | cut -d'.' -f1)
            minor=$(echo ${version} | cut -d'.' -f2)
            if [ ${type} = "patch" ]; then
              # check for stable version and create if missing
              if ! glrd --no-header --type stable --version ${major} | grep ${major}; then
                glrd-manage --s3-update --create stable --version ${major}
              fi
              glrd-manage --s3-update --create patch --version ${version} --commit ${commit}
            elif [ ${type} = "dev" ]; then
              glrd-manage --s3-update --create dev --version ${version} --commit ${commit}
            fi
      - name: Get created GLRD release
        uses: gardenlinux/glrd@v3
        with:
          cmd: |
            version=${{ inputs.version }}
            major=$(echo ${version} | cut -d'.' -f1)
            minor=$(echo ${version} | cut -d'.' -f2)
            glrd --type stable,patch,dev --version ${major}
