# @TODO: Replace with safe OCI manifast handling variant
name: publish_oci_containers
on:
  workflow_call:
    inputs:
      run_id:
        type: string
        required: true
      commit_id:
        type: string
        required: true
      version:
        type: string
        required: true
      target:
        type: string
        required: true
      flavors_matrix:
        type: string
        required: true
      bare_flavors_matrix:
        type: string
        default: '{"include":[]}'
      original_workflow_name:
        type: string
        default: ''
    secrets:
      aws_role:
        required: true
      aws_session:
        required: true
      aws_region:
        required: true
      oci_kms_arn:
        required: true
jobs:
  determine_environment:
    name: Determine release environment and repository for ${{ inputs.target }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_values.outputs.environment }}
      repository: ${{ steps.set_values.outputs.repository }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
        with:
          submodules: true
      - name: Set environment and repository
        id: set_values
        uses: actions/github-script@v7
        with:
          script: |
            const gitHubLib = await import("${{ github.workspace }}/.github/workflows/github.mjs");

            core.setOutput("environment", gitHubLib.getGitHubSigningEnvironmentFromTarget("${{ inputs.target }}"));
            const repository = gitHubLib.getGHCRRepositoryFromTarget("${{ inputs.target }}");

            if (repository == "") {
              core.setFailed("Invalid release target ${{ inputs.target }}");
              return false;
            }

            core.setOutput("repository", repository);

            return true;
  container:
    needs: determine_environment
    name: Publish container base image
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    env:
      CNAME_AMD64: ''
      CNAME_ARM64: ''
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
        with:
          submodules: true
      - name: Set flavor version reference
        run: |
          echo "${{ inputs.commit_id }}" | tee COMMIT
          echo "${{ inputs.version }}" | tee VERSION
      - name: Determine CNAME (amd64)
        id: cname_amd64
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/features_parse@a7545af15d3a1fa96675b24807eace643483da96 # pin@0.8.0
        with:
          flags: --cname container-amd64 cname
      - name: Determine CNAME (ard64)
        id: cname_arm64
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/features_parse@a7545af15d3a1fa96675b24807eace643483da96 # pin@0.8.0
        with:
          flags: --cname container-arm64 cname
      - name: Set CNAMEs
        run: |
          echo "CNAME_AMD64=${{ steps.cname_amd64.outputs.result }}" | tee -a "$GITHUB_ENV"
          echo "CNAME_ARM64=${{ steps.cname_arm64.outputs.result }}" | tee -a "$GITHUB_ENV"
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # pin@v4.3.0
        with:
          name: build-container-amd64
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run_id }}
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # pin@v4.3.0
        with:
          name: build-container-arm64
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run_id }}
      - name: Publish container base image
        run: |
          is_nightly=$(! [ "${{ inputs.original_workflow_name }}" = "nightly" ]; echo $?)
          version=$(cat VERSION)

          podman login -u token -p ${{ github.token }} ghcr.io
          tar xzv < "${CNAME_AMD64}.tar.gz"
          image="$(podman load < ${CNAME_AMD64}.oci | awk '{ print $NF }')"

          # Tagging for amd64 nightly
          if [ $is_nightly = true ]; then
            podman tag "$image" ${{ needs.determine_environment.outputs.repository }}:amd64-nightly
            podman push ${{ needs.determine_environment.outputs.repository }}:amd64-nightly
          fi

          # Tagging for amd64 with version
          podman tag "$image" ${{ needs.determine_environment.outputs.repository }}:amd64-${version}
          podman push ${{ needs.determine_environment.outputs.repository }}:amd64-${version}

          tar xzv < "${CNAME_ARM64}.tar.gz"
          image="$(podman load < ${CNAME_ARM64}.oci | awk '{ print $NF }')"

          # Tagging for arm64 nightly
          if [ $is_nightly = true ]; then
            podman tag "$image" ${{ needs.determine_environment.outputs.repository }}:arm64-nightly
            podman push ${{ needs.determine_environment.outputs.repository }}:arm64-nightly
          fi

          # Tagging for arm64 with version
          podman tag "$image" ${{ needs.determine_environment.outputs.repository }}:arm64-${version}
          podman push ${{ needs.determine_environment.outputs.repository }}:arm64-${version}

          # Creating and pushing manifest for nightly
          if [ $is_nightly = true ]; then
            podman manifest create ${{ needs.determine_environment.outputs.repository }}:nightly
            podman manifest add ${{ needs.determine_environment.outputs.repository }}:nightly ${{ needs.determine_environment.outputs.repository }}:amd64-nightly
            podman manifest add ${{ needs.determine_environment.outputs.repository }}:nightly ${{ needs.determine_environment.outputs.repository }}:arm64-nightly
            podman manifest push ${{ needs.determine_environment.outputs.repository }}:nightly
          fi

          # Creating and pushing manifest for version tag
          podman manifest create ${{ needs.determine_environment.outputs.repository }}:${version}
          podman manifest add ${{ needs.determine_environment.outputs.repository }}:${version} ${{ needs.determine_environment.outputs.repository }}:amd64-${version}
          podman manifest add ${{ needs.determine_environment.outputs.repository }}:${version} ${{ needs.determine_environment.outputs.repository }}:arm64-${version}
          podman manifest push ${{ needs.determine_environment.outputs.repository }}:${version}
  bare_flavors:
    needs: determine_environment
    name: Publish bare flavors
    if: ${{ inputs.bare_flavors_matrix != '{"include":[]}' }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        # @TODO: Replace with input matrix once OCI manifest tooling is ready to update existing ones
        config: [ libc, python, nodejs, sapmachine ]
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
        with:
          submodules: true
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # pin@v4.3.0
        with:
          pattern: build-bare-${{ matrix.config }}-*
          merge-multiple: true
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run_id }}
      - name: Publish bare flavor image ${{ matrix.config }}
        run: |
          is_nightly=$(! [ "${{ inputs.original_workflow_name }}" = "nightly" ]; echo $?)
          version=$(bin/garden-version "${{ inputs.version }}")

          podman login -u token -p ${{ github.token }} ghcr.io

          # Handling amd64 image
          image="$(podman load < ${{ matrix.config }}-amd64.oci | awk '{ print $NF }')"

          # Tagging and pushing amd64 with version
          podman tag "$image" ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:amd64-$version
          podman push ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:amd64-$version

          # Tagging and pushing amd64 with nightly
          if [ $is_nightly = true ]; then
            podman tag "$image" ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:amd64-nightly
            podman push ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:amd64-nightly
          fi

          # Handling arm64 image
          image="$(podman load < ${{ matrix.config }}-arm64.oci | awk '{ print $NF }')"

          # Tagging and pushing arm64 with version
          podman tag "$image" ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:arm64-$version
          podman push ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:arm64-$version

          # Tagging and pushing arm64 with nightly
          if [ $is_nightly = true ]; then
            podman tag "$image" ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:arm64-nightly
            podman push ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:arm64-nightly
          fi

          # Creating and pushing manifest for version tag
          podman manifest create ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:$version
          podman manifest add ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:$version ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:amd64-$version
          podman manifest add ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:$version ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:arm64-$version
          podman manifest push ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:$version

          # Creating and pushing manifest for nightly tag
          if [ $is_nightly = true ]; then
            podman manifest create ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:nightly
            podman manifest add ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:nightly ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:amd64-nightly
            podman manifest add ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:nightly ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:arm64-nightly
            podman manifest push ${{ needs.determine_environment.outputs.repository }}/bare-${{ matrix.config }}:nightly
          fi
  push_flavors:
    needs: determine_environment
    name: Publish flavors
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    env:
      CNAME: ''
    permissions:
      id-token: write
      packages: write
    environment: ${{ needs.determine_environment.outputs.environment }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.flavors_matrix) }}
      max-parallel: 8
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
        with:
          submodules: true
      - uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # pin@v4
        with:
          role-to-assume: ${{ secrets.aws_role }}
          role-session-name: ${{ secrets.aws_session }}
          aws-region: ${{ secrets.aws_region }}
      - name: Install python-gardenlinux-lib
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/setup@a7545af15d3a1fa96675b24807eace643483da96 # pin@0.8.0
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.1
        with:
          cosign-release: 'v2.4.1'
      - name: Set flavor version reference
        run: |
          echo "${{ inputs.commit_id }}" | tee COMMIT
          echo "${{ inputs.version }}" | tee VERSION
      - name: Set CNAME
        run: |
          echo "CNAME=$(gl-features-parse --cname ${{ matrix.flavor }}-${{ matrix.arch }} cname)" | tee -a "$GITHUB_ENV"
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # pin@v4.3.0
        with:
          name: build-${{ matrix.flavor }}-${{ matrix.arch }}
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run_id }}
      - name: Push using the glcli util
        env:
          GL_CLI_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GL_CLI_REGISTRY_USERNAME: ${{ github.repository_owner }}
        run: |
          mkdir "$CNAME"

          tar -C "$CNAME" -xzf "$CNAME.tar.gz"

          gl-oci push-manifest \
            --dir "${CNAME}" \
            --container ${{ needs.determine_environment.outputs.repository }} \
            --arch ${{ matrix.arch }} \
            --version ${{ inputs.version }} \
            --cname "${CNAME}" \
            --cosign_file digest.txt \
            --manifest_file "oci_manifest_entry_${CNAME}.json"
      - name: Sign the manifest
        run: |
          cat digest.txt
          docker login ghcr.io -u token -p ${{ github.token }}
          cosign sign -tlog-upload=false --key "awskms://kms.${{ secrets.aws_region }}.amazonaws.com/${{ secrets.oci_kms_arn }}" "${{ needs.determine_environment.outputs.repository }}@$(cat digest.txt)"
      - name: Verify signature
        run: |
          cosign verify --insecure-ignore-tlog=true --key "awskms://kms.${{ secrets.aws_region }}.amazonaws.com/${{ secrets.oci_kms_arn }}" "${{ needs.determine_environment.outputs.repository }}@$(cat digest.txt)"
      - uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # pin@v4.2.3
        with:
          path: oci_manifest_entry_${{ env.CNAME }}.json
          key: oci-manifest-${{ matrix.flavor }}-${{ matrix.arch }}-${{ github.run_id }}
  update_manifest_index:
    needs: [ determine_environment, push_flavors ]
    name: Update OCI manifest index
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    env:
      CNAME: ''
    permissions:
      id-token: write
      packages: write
      actions: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.flavors_matrix) }}
      max-parallel: 1
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1
        with:
          submodules: true
      - name: Install python-gardenlinux-lib
        uses: gardenlinux/python-gardenlinux-lib/.github/actions/setup@a7545af15d3a1fa96675b24807eace643483da96 # pin@0.8.0
      - name: Set flavor version reference
        run: |
          echo "${{ inputs.commit_id }}" | tee COMMIT
          echo "${{ inputs.version }}" | tee VERSION
      - name: Set CNAME
        run: |
          echo "CNAME=$(gl-features-parse --cname ${{ matrix.flavor }}-${{ matrix.arch }} cname)" | tee -a "$GITHUB_ENV"
      - uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # pin@v4.2.3
        with:
          path: oci_manifest_entry_${{ env.CNAME }}.json
          key: oci-manifest-${{ matrix.flavor }}-${{ matrix.arch }}-${{ github.run_id }}
      - name: Update index using glcli tool
        env:
          GL_CLI_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GL_CLI_REGISTRY_USERNAME: ${{ github.repository_owner }}
        run: |
          mkdir manifests
          mv oci_manifest_entry_${CNAME}.json manifests/

          gl-oci update-index \
            --container ${{ needs.determine_environment.outputs.repository }} \
            --version ${{ inputs.version }} \
            --manifest_folder manifests
