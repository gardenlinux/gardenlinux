name: build
on:
  workflow_call:
    inputs:
      version:
        type: string
        default: today
      default_modifier:
        type: string
        default: ""
      use_kms:
        type: boolean
        default: false
    secrets:
      secureboot_db_kms_arn:
        required: false
      aws_region:
        required: false
      aws_kms_role:
        required: false
      aws_oidc_session:
        required: false
    outputs:
      version:
        value: ${{ jobs.setup.outputs.version }}
jobs:
  setup:
    runs-on: ec2-gardenlinux-amd64
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: resolve version "${{ inputs.version }}"
        id: version
        run: echo version="$(bin/garden-version "${{ inputs.version }}")" | tee -a "$GITHUB_OUTPUT"
        shell: bash
      - name: bulid certificates
        if: ${{ ! inputs.use_kms }}
        run: make cert/secureboot.db.auth
        shell: bash
      - name: use kms backed certificates
        if: ${{ inputs.use_kms }}
        run: |
          touch cert/gardenlinux-secureboot.db.arn
          for f in secureboot.{{pk,null.pk,kek,db}.auth,db.{crt,arn}}; do
            ln -sr "cert/gardenlinux-$f" "cert/$f"
          done
        shell: bash
      - name: pack certificates for following bulid stages
        run: sudo tar -czv cert > cert.tar.gz
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: _cert
          path: cert.tar.gz
  images:
    needs: setup
    runs-on: ec2-gardenlinux-${{ matrix.architecture }}
    permissions:
      id-token: write
    environment: ${{ inputs.use_kms && 'oidc_aws_kms_secureboot_signing' || '' }}
    strategy:
      fail-fast: false
      matrix:
        architecture: [ amd64, arm64 ]
        target: [ kvm, "kvm,_secureboot", "kvm,_secureboot,_readonly", "kvm,_secureboot,_readonly,_persistence", metal, "metal,_secureboot", "metal,_secureboot,_readonly", "metal,_secureboot,_readonly,_persistence", gcp, aws, "aws,_secureboot", "aws,_secureboot,_readonly", "aws,_secureboot,_readonly,_persistence", azure, ali, openstack, vmware, "metal,_pxe", firecracker, "aws,githubActionRunner", "metal,vhost" ]
        modifier: [ "${{ inputs.default_modifier }}" ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: _cert
      - name: unpack certificates from previous build stage
        run: sudo tar -xzvf cert.tar.gz && rm cert.tar.gz
        shell: bash
      - name: write secureboot db arn for kms backed certificates
        if: ${{ inputs.use_kms }}
        run: echo "${{ secrets.secureboot_db_kms_arn }}" > cert/gardenlinux-secureboot.db.arn
        shell: bash
      - name: set VERSION=${{ needs.setup.outputs.version }}
        run: |
          bin/garden-version "${{ needs.setup.outputs.version }}" | tee VERSION
          git update-index --assume-unchanged VERSION
        shell: bash
      - name: get cname
        run: |
          cname="$(bin/garden-feat --features ${{ matrix.target }}${{ matrix.modifier }}${{ matrix.additional_modifer }})"
          artifact_name="$cname-${{ matrix.architecture }}-${{ needs.setup.outputs.version }}-$(git rev-parse --short HEAD)"
          printf 'cname=%s\nartifact_name=%s\n' "$cname" "$artifact_name" | tee -a "$GITHUB_ENV"
        shell: bash
      - if: ${{ inputs.use_kms }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.aws_kms_role }}
          role-session-name: ${{ secrets.aws_oidc_session }}
          aws-region: ${{ secrets.aws_region }}
      - name: build Garden Linux image
        run: make BUILD_OPTS="--lessram ${{ inputs.use_kms && '--export-aws-access-key' || '' }}" "${{ env.cname }}"
        shell: bash
      - name: pack build artifacts for upload
        run: |
          mv .build "${{ env.artifact_name }}"
          tar -czvf "${{ env.artifact_name }}.tar.gz" "${{ env.artifact_name }}"
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: "build-${{ env.artifact_name }}"
          path: "${{ env.artifact_name }}.tar.gz"
