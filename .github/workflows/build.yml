name: build
on:
  workflow_call:
    inputs:
      version:
        type: string
        default: today
      default_modifier:
        type: string
        default: ""
      use_kms:
        type: boolean
        default: false
    secrets:
      secureboot_db_kms_arn:
        required: false
      aws_region:
        required: false
      aws_kms_role:
        required: false
      aws_oidc_session:
        required: false
    outputs:
      version:
        value: ${{ jobs.version.outputs.version }}
jobs:
  version:
    name: resolve version
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: resolve version "${{ inputs.version }}"
        id: version
        run: echo version="$(bin/garden-version "${{ inputs.version }}")" | tee -a "$GITHUB_OUTPUT"
  cert:
    name: certificates
    needs: version
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: gardenlinux/workflow-telemetry-action@v1
        with:
          metric_frequency: 1
          proc_trace_min_duration: 10
          proc_trace_chart_max_count: 50
          comment_on_pr: false
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - uses: ./.github/actions/setup
      - name: set VERSION=${{ needs.version.outputs.version }}
        run: |
          bin/garden-version "${{ needs.version.outputs.version }}" | tee VERSION
          git update-index --assume-unchanged VERSION
      - name: bulid certificates
        if: ${{ ! inputs.use_kms }}
        run: ./cert/build
      - name: use kms backed certificates
        if: ${{ inputs.use_kms }}
        run: |
          touch cert/gardenlinux-secureboot.db.arn
          for f in secureboot.{{pk,null.pk,kek,db}.auth,db.{crt,arn}}; do
            ln -sr "cert/gardenlinux-$f" "cert/$f"
          done
      - uses: actions/cache/save@v3
        with:
          path: cert
          key: cert-${{ github.run_id }}
  base:
    name: bootstrap stage
    needs: version
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: gardenlinux/workflow-telemetry-action@v1
        with:
          metric_frequency: 1
          proc_trace_min_duration: 10
          proc_trace_chart_max_count: 50
          comment_on_pr: false
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - uses: ./.github/actions/setup
      - name: set VERSION=${{ needs.version.outputs.version }}
        run: |
          bin/garden-version "${{ needs.version.outputs.version }}" | tee VERSION
          git update-index --assume-unchanged VERSION
      - name: build base-amd64 base-arm64
        run: ./build base-amd64 base-arm64
      - uses: actions/cache/save@v3
        with:
          path: .build
          key: base-${{ github.run_id }}
  test_container:
    name: container image for tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: gardenlinux/workflow-telemetry-action@v1
        with:
          metric_frequency: 1
          proc_trace_min_duration: 10
          proc_trace_chart_max_count: 50
          comment_on_pr: false
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - uses: ./.github/actions/setup
      - name: build test container
        run: |
          podman build --squash --tag test --build-arg base="$(./build --print-container-image)" tests
          podman save --format oci-archive test > test.oci
      - name: upload test container
        uses: actions/cache/save@v3
        with:
          path: test.oci
          key: test_container:${{ github.run_id }}
  images:
    needs: [ version, cert, base, test_container ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write
    environment: ${{ inputs.use_kms && 'oidc_aws_kms_secureboot_signing' || '' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
        target: [ kvm, "kvm_secureboot", "kvm_secureboot_readonly", "kvm_secureboot_readonly_persistence", metal, "metal_secureboot", "metal_secureboot_readonly", "metal_secureboot_readonly_persistence", gcp, aws, "aws_secureboot", "aws_secureboot_readonly", "aws_secureboot_readonly_persistence", azure, ali, openstack, openstackbaremetal, vmware, "metal_pxe", firecracker, "metal-vhost" ]
        modifier: [ "${{ inputs.default_modifier }}" ]
        include:
          - target: container
            arch: amd64
            modifier: ""
          - target: container
            arch: arm64
            modifier: ""
    steps:
      - uses: gardenlinux/workflow-telemetry-action@v1
        with:
          metric_frequency: 1
          proc_trace_min_duration: 10
          proc_trace_chart_max_count: 50
          comment_on_pr: false
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - uses: ./.github/actions/setup
      - name: set VERSION=${{ needs.version.outputs.version }}
        run: |
          bin/garden-version "${{ needs.version.outputs.version }}" | tee VERSION
          git update-index --assume-unchanged VERSION
      - name: load cert cache
        uses: actions/cache/restore@v3
        with:
          path: cert
          key: cert-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: write secureboot db arn for kms backed certificates
        if: ${{ inputs.use_kms }}
        run: echo "${{ secrets.secureboot_db_kms_arn }}" > cert/gardenlinux-secureboot.db.arn
      - name: configure aws credentials for kms signing
        if: ${{ inputs.use_kms }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.aws_kms_role }}
          role-session-name: ${{ secrets.aws_oidc_session }}
          aws-region: ${{ secrets.aws_region }}
      - name: load bootstrap stage cache
        uses: actions/cache/restore@v3
        with:
          path: .build
          key: base-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: download test container cache
        uses: actions/cache/restore@v3
        with:
          path: test.oci
          key: test_container:${{ github.run_id }}
          fail-on-cache-miss: true
      - name: import test container image
        run: |
          podman load < test.oci
          rm test.oci
      - name: update bootstrap stage build artifact timestamps
        run: |
          t="$(date '+%s')"
          find .build -exec touch -d "@$t" {} +
      - name: build
        run: ./build ${{ inputs.use_kms && '--kms' || '' }} ${{ matrix.target }}${{ matrix.modifier }}-${{ matrix.arch }}
      - name: test
        run: ./test --container-image test ${{ matrix.target }}${{ matrix.modifier }}-${{ matrix.arch }}
      - uses: pmeier/pytest-results-action@8104ed7b3d3ba4bb0d550e406fc26aa756630fcc
        if: always()
        with:
          path: tests/test.xml
      - name: get cname
        run: echo "cname=$(basename "$(realpath ".build/${{ matrix.target }}${{ matrix.modifier }}-${{ matrix.arch }}")" .artifacts)" | tee -a "$GITHUB_ENV"
      - name: pack build artifacts for upload
        run: tar -cSzvf "${{ env.cname }}.tar.gz" -C .build -T ".build/${{ env.cname }}.artifacts"
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ env.cname }}"
          path: "${{ env.cname }}.tar.gz"
  distroless:
    needs: [ version, base ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
        config: [ libc, python, nodejs, sapmachine ]
    steps:
      - uses: gardenlinux/workflow-telemetry-action@v1
        with:
          metric_frequency: 1
          proc_trace_min_duration: 10
          proc_trace_chart_max_count: 50
          comment_on_pr: false
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - uses: ./.github/actions/setup
      - name: set VERSION=${{ needs.version.outputs.version }}
        run: |
          bin/garden-version "${{ needs.version.outputs.version }}" | tee VERSION
          git update-index --assume-unchanged VERSION
      - name: load bootstrap stage cache
        uses: actions/cache/restore@v3
        with:
          path: .build
          key: base-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: update bootstrap stage build artifact timestamps
        run: |
          t="$(date '+%s')"
          find .build -exec touch -d "@$t" {} +
      - name: build
        run: ./build_distroless --arch "${{ matrix.arch }}" "${{ matrix.config }}"
      - uses: actions/upload-artifact@v3
        with:
          name: "distroless-${{ matrix.config }}-${{ matrix.arch }}"
          path: ".build/distroless/${{ matrix.config }}-${{ matrix.arch }}.oci"
