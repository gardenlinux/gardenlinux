#!/bin/bash

set -Eeufo pipefail

exec 3>&1
exec 1>&2

set -x

jwt_path="$(realpath "$(dirname "$BASH_SOURCE")/jwt")"

runner_dir_template=
ami=
instance_type=
security_group=
repo=
label=
api_token=
app_id=
app_rsa_key=
ssh_key=
config=

while [ "$#" -gt 0 ]; do
	flag="$1"; shift
	case "$flag" in
		-d|--runner-dir) runner_dir_template="$1"; shift ;;
		-i|--ami) ami="$1"; shift ;;
		-s|--security-group) security_group="$1"; shift ;;
		-e|--ec2-instance-type) instance_type="$1"; shift ;;
		-r|--repo) repo="$1"; shift ;;
		-l|--label) label="$1"; shift ;;
		-t|--token) api_token="$1"; shift ;;
		-a|--app) app_id="$1"; shift ;;
		-k|--key) app_rsa_key="$1"; shift ;;
		-p|--ssh) ssh_key="$1"; shift ;;
		-c|--config) config="$1"; shift ;;
	esac
done

if [ -n "$config" ]; then
	while IFS='=' read -r key value; do
		declare "$key"="$value"
	done < "$config"
fi

if [ ! -d "$runner_dir_template" ]; then
	echo "runner directory $runner_dir_template not a directory" >&2
	exit 1
fi

if [ -z "$ami" ]; then
	echo "required argument ami missing" >&2
	exit 1
fi

if [ -z "$security_group" ]; then
	echo "required argument security-group missing" >&2
	exit 1
fi

if [ -z "$label" ]; then
	echo "required argument label missing" >&2
	exit 1
fi

IFS='/' read -r repo_org repo_name <<< "$repo"

if [ -z "$repo_org" ] || [ -z "$repo_name" ]; then
	echo "invalid repo format, should be full name with owner" >&2
	exit 1
fi

if [ -z "$api_token" ]; then
	if [ -z "$app_id" ]; then
		echo "required argument token or app id missing" >&2
		exit 1
	fi
	if [ -z "$app_rsa_key" ]; then
		echo "required argument key missing" >&2
		exit 1
	fi
	if [ ! -f "$app_rsa_key" ]; then
		echo "$app_rsa_key not a file" >&2
		exit 1
	fi

	jwt="$("$jwt_path" "$app_id" < "$app_rsa_key")"

	installation_id="$(curl -s -f -H "Authorization: Bearer $jwt" "https://api.github.com/app/installations" | jq -r '.[] | select(.account.login == "'"$repo_org"'") | .id')"
	if [ -z "$installation_id" ]; then
		echo "github app $app_id not installed for organization $repo_org" >&2
		exit 1
	fi

	api_token="$(curl -s -f -X POST -H "Authorization: Bearer $jwt" "https://api.github.com/app/installations/$installation_id/access_tokens" | jq -r '.token')"
fi

registration_token="$(curl -s -f -u "token:$api_token" -X POST "https://api.github.com/repos/$repo/actions/runners/registration-token" | jq -r '.token')"

runner_dir="$(mktemp -d)"
cp -a "$runner_dir_template/." "$runner_dir"
pushd "$runner_dir"

./config.sh \
	--unattended \
	--disableupdate \
	--ephemeral \
	--name "$(uuidgen)" \
	--labels "$label" \
	--url "https://github.com/$repo" \
	--token "$registration_token"

config="$((for file in runner credentials credentials_rsaparams; do
	echo "$file $(base64 -w 0 ".$file")";
done; echo "scheduler_url http://$(curl -sS http://169.254.169.254/latest/meta-data/public-ipv4)/";) | jq -R 'split(" ") | { (.[0]): (.[1]) }' | jq -s add | jq '{ "runner": . }')"

popd
rm -rf "$runner_dir"

aws ec2 run-instances \
	--image-id "$ami" \
	--count 1 \
	--instance-type "$instance_type" \
	--security-group-ids "$security_group" \
	--instance-initiated-shutdown-behavior terminate \
	${ssh_key:+"--key-name"} ${ssh_key:+"$ssh_key"} \
	--user-data "$config" \
| jq -r '.Instances[0].InstanceId' >&3
