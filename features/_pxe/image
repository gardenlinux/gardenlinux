#!/usr/bin/env bash

set -Eeuxo pipefail

rootfs=$1
targetBase=$2
targetBaseDir=$(dirname "$targetBase")
timestamp=$(garden-version --epoch "$version")

# extract kernel image and initramfs
cp "$rootfs/boot/"vmlinuz* "$targetBase.vmlinuz"
cp "$rootfs/boot/"initrd* "$targetBase.initrd"
chmod 644 $targetBase.initrd

cmdline="$(mktemp)"
squashfs="$(mktemp)"
initrd="$(mktemp)"
unified_image="$(mktemp)"
unified_image_signed="$targetBase.efi"

echo "console=ttyS0 gl.live=1 gl.ovl=/:tmpfs" > "$cmdline"

rootfs_work=$(mktemp -d)
cp -a "$rootfs/." "$rootfs_work"

find "$rootfs_work/var/log/" -type f -delete

chcon -R system_u:object_r:unlabeled_t:s0 "$rootfs_work"
# Temporary deactivated until this is fixed by upstream:
# GitHub: https://github.com/gardenlinux/gardenlinux/issues/1014
#chroot "$rootfs_work" /usr/bin/env -i /sbin/setfiles /etc/selinux/default/contexts/files/file_contexts /
rm "$rootfs_work/.autorelabel"

# create the squashfs to include the fully generate image
mksquashfs "$rootfs_work" "$squashfs" -noappend -comp xz -mkfs-time "$timestamp" -all-time "$timestamp"

rm -rf "$rootfs_work"

[[ ! -e "$rootfs$initrd" ]]
touch "$rootfs$initrd"
mount --bind "$initrd" "$rootfs$initrd"
[[ ! -e "$rootfs$squashfs" ]]
touch "$rootfs$squashfs"
mount --bind "$squashfs" "$rootfs$squashfs"

[[ -d "$rootfs/proc" ]] && [[ -z "$(ls -A "$rootfs/proc")" ]]
mount -t proc none "$rootfs/proc"

kernel_file=$(find "$rootfs/boot/" -name 'vmlinuz-*')
kernel_version="${kernel_file#*-}"

chroot "$rootfs" dracut \
	--force \
	--kver "$kernel_version" \
	--modules "bash dash systemd systemd-initrd kernel-modules kernel-modules-extra terminfo udev-rules dracut-systemd fs-lib shutdown gardenlinux-live" \
	--include "$squashfs" "root.squashfs" \
	--reproducible \
	--no-hostonly \
	"$initrd"

umount "$rootfs/proc"

umount "$rootfs$initrd"
rm "$rootfs$initrd"
umount "$rootfs$squashfs"
rm "$rootfs$squashfs"

case "$arch" in
	amd64)
		uefi_arch=x64
		gnu_arch=x86_64
		initrd_vma=0x3000000
		;;
	arm64)
		uefi_arch=aa64
		gnu_arch=aarch64
		initrd_vma=0x4000000
		;;
esac

# create unified image
"${gnu_arch}-linux-gnu-objcopy" \
	--add-section .cmdline="$cmdline" --change-section-vma .cmdline=0x1000000 \
	--add-section .linux="$kernel_file" --change-section-vma .linux=0x2000000 \
	--add-section .initrd="$initrd" --change-section-vma .initrd="$initrd_vma" \
	"$rootfs/usr/lib/systemd/boot/efi/linux$uefi_arch.efi.stub" "$unified_image"

# sign unified image
datefudge -s "@$timestamp" sbsign --cert /cert/secureboot.db.sign.crt --key /cert/secureboot.db.sign.key --output "$unified_image_signed" "$unified_image"

# cleanup
rm -rf "$cmdline" "$initrd" "$unified_image"

sha256sum "$squashfs" | cut -c -64 > "$targetBaseDir/root.squashfs.sha256sum"
(cd "$targetBaseDir" && echo "root.squashfs.sha256sum" | cpio -H newc -o | xz --check=crc32 >> "$(basename "$targetBase").initrd")
mv "$squashfs" "$targetBaseDir/root.squashfs"
