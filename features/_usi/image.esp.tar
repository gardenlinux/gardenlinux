#!/usr/bin/env bash

set -eufo pipefail

input="$1"
output="$2"

export PATH="/builder/image.d:$PATH"

rootfs="$(mktemp -d)"
mount -t tmpfs -o size="$TEMPFS_SIZE" tmpfs "$rootfs"
tar --extract --xattrs --xattrs-include '*' --directory "$rootfs" < "$input"

echo "creating root EROFS disk"

erofs_cpio_dir="$(mktemp -d)"
erofs="$erofs_cpio_dir/root.img"
mkfs.erofs --quiet -z zstd,12 -E force-inode-compact -T "$BUILDER_TIMESTAMP" -U "$(echo "gardenlinux:$BUILDER_VERSION:erofs:root" | uuid_hash)" "$erofs" "$rootfs"

size_chroot="$(du -s "$rootfs" | cut -f 1)"
size_erofs="$(du "$erofs" | cut -f 1)"
echo "root disk compressed by $(( ( ( size_chroot - size_erofs ) * 100 ) / size_chroot ))% ($(du -sh "$rootfs" | cut -f 1) -> $(du -h "$erofs" | cut -f 1))"

echo
echo "building initrd with embedded root disk"

mkdir -p "$erofs_cpio_dir/"{proc,sys,dev,run,tmp,etc/systemd/system,sysroot,usr,modules}

touch "$erofs_cpio_dir/etc/initrd-release"
touch "$erofs_cpio_dir/etc/machine-id"
ln -s initrd.target "$erofs_cpio_dir/etc/systemd/system/default.target"

IFS=',' read -r -a features <<< "$BUILDER_FEATURES"
for feature in "${features[@]}"; do
	if [ -e "/builder/features/$feature/initrd.include/etc" ]; then
		cp -a "/builder/features/$feature/initrd.include/etc/." "$erofs_cpio_dir/etc/"
	fi
done

for i in bin sbin lib lib64; do
	[ -e "$rootfs/usr/$i" ] || continue
	ln -s "usr/$i" "$erofs_cpio_dir/$i"
done

for i in drivers/block/loop.ko lib/libcrc32c.ko fs/erofs/erofs.ko; do
	set +f
	basename "$i" >> "$erofs_cpio_dir/modules/list"
	cp "$rootfs/usr/lib/modules/"*"/kernel/$i" "$erofs_cpio_dir/modules/"
	set -f
done

case "$BUILDER_ARCH" in
	amd64)
		gnu_arch=x86_64
		uefi_arch=X64
		;;
	arm64)
		gnu_arch=aarch64
		uefi_arch=AA64
		;;
esac

cp "$rootfs/usr/libexec/zero-copy-initrd/init-$gnu_arch" "$erofs_cpio_dir/init"

initrd="$(mktemp)"
(cd "$erofs_cpio_dir" && find . | cpio -o -H newc) > "$initrd"
rm -rf "$erofs_cpio_dir"

kernel="$(find "$rootfs/boot/" -name 'vmlinuz-*' | sort -V | tail -n 1)"
uki="$(mktemp)"

read -r _ cmdline < "$rootfs/etc/kernel/cmdline"

/usr/lib/systemd/ukify build \
	--stub "$rootfs/usr/lib/systemd/boot/efi/linux$(tr '[:upper:]' '[:lower:]' <<< "$uefi_arch").efi.stub" \
	--linux "$kernel" \
	--initrd "$initrd" \
	--cmdline "$cmdline" \
	--uname "${kernel#*-}" \
	--os-release "@$rootfs/etc/os-release" \
	--output "$uki"

rm "$initrd"

esp_dir="$(mktemp -d)"

IFS=',' read -r -a features <<< "$BUILDER_FEATURES"
for feature in "${features[@]}"; do
	if [ -e "/builder/features/$feature/usi.config" ]; then
		"/builder/features/$feature/usi.config" "$uki" "$esp_dir" "$rootfs"
	fi
done

rm "$uki"

umount "$rootfs"
rmdir "$rootfs"

esp_tar="$(mktemp)"

find "$esp_dir" -mindepth 1 -printf '%P\n' | tar --create --mtime="@$BUILDER_TIMESTAMP" --sort name --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime --directory "$esp_dir" --no-recursion -T - > "$esp_tar"
rm -rf "$esp_dir"

cp --sparse always "$esp_tar" "$output"
rm "$esp_tar"

sha256sum "$output"
