#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import json
import time
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = logging.StreamHandler(sys.stderr)
handler.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

class AzureImageBuild:

    def __init__(self, resource_group, storage_account_name, image_name, image_path, debug):
        self.resource_group=resource_group
        self.storage_account_name=storage_account_name
        self.image_name=image_name
        self.image_path=image_path
        self.debug=debug
        if self.debug:
            handler.setLevel(logging.DEBUG)


    def get_account_key(self, resource_group, storage_account_name):
        logger.debug("Getting account keys for storage account %s and resource group %s" %(storage_account_name, resource_group)) 
        result = subprocess.run(["az", "storage", "account", "keys", "list", "--resource-group", resource_group, "--account-name", storage_account_name], capture_output=True)
        if result.returncode != 0:
            sys.exit("Unable to get account key for storage account " + storage_account_name + ": " + result.stdout.decode("utf-8") + " " + result.stderr.decode("utf-8"))

        logger.debug(result)
        doc = json.loads(result.stdout)
        return doc[0]["value"]


    def upload_disk(self, storage_account_name, image_path, image_name, key):
        logger.debug("Uploading disk " + image_path)
        result = subprocess.run(["azure-vhd-utils",
            "upload",
            "--localvhdpath", image_path,
            "--stgaccountname", storage_account_name,
            "--blobname", image_name,
            "--stgaccountkey", key],
            capture_output=True)
        if result.returncode != 0:
            sys.exit("Upload of image failed:" + str(result.stdout) + " " + str(result.stderr))
        if self.debug:
            print(result)


    def disk_create(self, resource_group, storage_account_name, image_name):
        logger.debug("Creating disk for image " + image_name)
        source = "https://" + storage_account_name + ".blob.core.windows.net/vhds/" + image_name + ".vhd"
        result = subprocess.run(["az", "disk", "create",
            "-g", resource_group,
            "--name", image_name,
            "--source", source],
            capture_output=True)
        logging.debug(result)
        if result.returncode != 0:
            sys.exit("Disk create failed:" + result.stdout.decode("utf-8") + " " + result.stderr.decode("utf-8"))
        doc = json.loads(result.stdout)
        # disk id
        return doc["id"]

    def image_create(self, resource_group, image_name, disk_id):
        logging.debug("Creating Azure image for disk id " + disk_id)
        result = subprocess.run(["az", "image", "create",
            "-g", resource_group,
            "--name", image_name,
            "--source", disk_id,
            "--os-type", "linux"],
            capture_output=True)
        logging.debug(result)
        if result.returncode != 0:
            sys.exit("Image create failed: %s %s" % (result.stdout.decode("utf-8"), result.stderr.decode("utf-8")))


    def run(self):
        a_key = self.get_account_key(self.resource_group, self.storage_account_name)
        self.upload_disk(self.storage_account_name, self.image_path, self.image_name, a_key)
        disk_id = self.disk_create(self.resource_group, self.storage_account_name, self.image_name)
        self.image_create(self.resource_group, self.image_name, disk_id)
        logging.info("Bootable image successfully created")


    @classmethod
    def _argparse_register(cls, parser):

        parser.add_argument(
            '--resource-group',
            type=str,
            dest='resource_group',
            help='resource group',
            required=True
        )
        parser.add_argument(
            '--storage-account-name',
            type=str,
            dest='storage_account_name',
            help='storage accont name',
            required=True
        )
        parser.add_argument(
            '--image-name',
            type=str,
            dest='image_name',
            help='image name',
            required=True
        )
        parser.add_argument(
            '--image-path',
            type=str,
            dest='image_path',
            help='image_path',
            required=True
        )
        parser.add_argument(
            '--debug',
            type=bool,
            default=False,
            help="Verbose debug output",
        )

    @classmethod
    def _main(cls):
        parser = argparse.ArgumentParser()
        cls._argparse_register(parser)
        args = parser.parse_args()
        print(args)

        azure_img_build = cls(
            resource_group=args.resource_group,
            storage_account_name=args.storage_account_name,
            image_name=args.image_name,
            image_path=args.image_path
            debug=args.debug
        )
        azure_img_build.run()


if __name__ == '__main__':
    AzureImageBuild._main()
