#!/usr/bin/env bash
set -Eeuo pipefail

# TODO: add -runas -> valid if running as root
#TODO uefi secure boot, uefi certificate
# tpm https://qemu-project.gitlab.io/qemu/specs/tpm.html
# serial console on --daemonize to unix socket file
# virtual console fixing size problems ? vc
# -snapshot per disk? detect-zeroes=unmap
# virtio-blk instead of scsi ?
#TODO sysctl -w net.ipv4.ping_group_range='0 2147483647'
# stty cols 132
#
# pxe dir, mac : parsing

# Define default VARs
gnu_head="head"
gnu_stat="stat"
build_os="$(uname -s)"
arch="$(uname -m)"

# OS Validation: macOS
if [ "Darwin" = $build_os ]; then
        running_os="macos"
        gnu_head="ghead"
        gnu_stat="gstat"

        # Translate ARM64 to AARCH64
        # on macOS
        if [ "arm64" = $arch ]; then
            arch="aarch64"
        fi
fi

# OS Validation: CentOS
if [[ -f "/etc/centos-release" ]]; then
    running_os="centos"
fi

# OS Validation: Debian
if [[ -f "/etc/debian_version" ]]; then
    running_os="debian"
fi


thisDir=$(dirname "$(readlink -f "$BASH_SOURCE")")
targetDir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
tmpDir=${TMPDIR:-/tmp}
cpu=2
memory=2Gi
monitor=1
bridge=
daemonize=
pxe=
pxefile=$thisDir/../examples/ipxe/start-vm.ipxe
ignfile=""
pxe_binary=
portbase=2223
if [ "macos" != $running_os ]; then
    port=$portbase; while ss -tul | grep :$port &> /dev/null; do (( ++port )); done
else
    port=$portbase; while netstat -an -ptcp | grep LISTEN | awk {'print $4'} | grep :$port &> /dev/null; do (( ++port )); done
fi
uefi=
uefiCode=
uefiVars=
tpm=1
vnc=
vncbase=5900
if [ "macos" != $running_os ]; then
    vncport=0; while ss -tul | grep :$(( vncport + $vncbase )) &> /dev/null; do (( ++vncport )); done
else
    vncport=0; while netstat -an -ptcp | grep LISTEN | awk {'print $4'} | grep :$(( vncport + $vncbase )) &> /dev/null; do (( ++vncport )); done
fi
keypress=1
mac="$(printf '02:%02x:%02x:%02x:%02x:%02x' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)))"
virtOpts=( )

[ $(id -u) == 0 ] && virtOpts=(	"-runas nobody" )

gardenlinux_build_cre=${GARDENLINUX_BUILD_CRE:-"sudo podman"}

source "${thisDir}/.constants.sh" \
	--flags 'daemonize,uefi,skipkp,vnc' \
	--flags 'cpu:,mem:,bridge:,port:,mac:,arch:' \
	--flags 'pxe:' \
	--flags 'ignfile:' \
	--flags 'ueficode:,uefivars:' \
	--usage '[ --daemonize ] [ --cpu:<#> ] [ --mem:<size> ] [ --pxe:<dir> ] [<image file>[,<size>]]*' \
	--sample '.build/rootfs.raw' \
        --sample ',1G ubuntu-16.04.7-server-amd64.iso' \
	--help  "Starts a virtual machine with the most basic environment, needed. Perfect use for test cases and running samples of GardenLinux. This script can run unprivileged but it should have the possibility to use kvm (group kvm) otherwise it will be super slow. If not being root, the network will be slow and no ICMP (ping) capabilities are with the VM.

--cpu <int>	number of vCPUs to start the VM with (default: $cpu)
--arch <platform> set the emulated platform.
		i386, x86_64, x86_64-microvm, arm, aarch64 are supported. (default: $arch)
--mem <int>	memory provided to the virtual machine (default: $memory) in MB if unit is omitted

--uefi		boot with uefi bios enabled, needs \`apt-get install ovmf\` (default: no)
--ueficode <path> defines the uefi code used. The file is readonly (default: $uefiCode)
--uefivars <path> defines the uefi variables used. The file will be !modified! if vartiables are
		set (default: $uefiVars)

--bridge <if>	disables host networking and bridges the machine to the specified interface
--port <int>	specifies the local ssh port. this port is mounted to the running machine,
		not if --bridge is specified (default: $portbase)
--mac <macaddr> the mac address is usually randomized. It is used to identify the monitoring
		port, the mac address of the machine and the UUID. Can be set to this value.
--pxe		enables pxe boot on the vm. Minimum one image file must be a directory
--ignfile	provide an ignition file whe pxe booting

--daemonize	start the virtual machine in background, console deactivated (default: no)
--skipkp	skip the keypress to the verify status before execute.
		needed for automated testing, disabled on --daemonize
--vnc		sitches from serial console to vnc graphics console / enables vnc in --daemonize
		the vnc baseport is $vncbase. if this is not empty we try the next

<image file>	a file containing the image to boot. Format is determined by the extension.
                raw, vdi, vpc, vhd, vhdx, vmdk, qcow2, iso are recognized.
		,<size> is optional. If the file is smaller then <size> it will be resized
		with the sparse feature of the filesystem to the requested size.
		If <image file> is omitted and only ,<size> is specified, a temporary file
		of this size will be created. The file will not be deleted."

eval "$dgetopt"
while true; do
	flag="$1"; shift
	dgetopt-case "$flag"
	case "$flag" in
		--cpu)		cpu="$1"; 	shift ;;
		--arch)		arch="$1"; 	shift ;;
		--mem)		memory="$1"; 	shift ;;
		--daemonize) 	daemonize=1; keypress=; ;;
		--vnc)	 	vnc=1; 		;;
		--uefi) 	uefi=1; 	;;
		--mac)		mac="$1";	shift ;;
		--ueficode)     uefiCode="$1";  shift ;;
		--uefivars)     uefiVars="$1";  shift ;;
		--bridge ) 	bridge="$1";  	shift ;;
		--pxe )         pxe="$(realpath $1)";  shift ;;
		--ignfile )     ignfile="$(realpath $1)";  shift ;;
		--port)         port="$1";	shift ;;
		--skipkp) 	keypress=; 	;;
		--) break ;;
		*) eusage "unknown flag '$flag'" ;;
	esac
done

# Add UEFI options
if [ "$arch" = x86_64 ]; then

        if [ "$running_os" = macos ]; then
                # Test for HomeBrew path
                homeBrewPrefix=$(brew info qemu | awk 'NR==4{print $1}')
                uefiCode="${uefiCode:-$homeBrewPrefix/share/qemu/edk2-x86_64-code.fd}"
                uefiVars="${uefiVars:-$homeBrewPrefix/share/qemu/edk2-i386-vars.fd}"
        else
                uefiCode="${uefiCode:-/usr/share/OVMF/OVMF_CODE.fd}"
                uefiVars="${uefiVars:-/usr/share/OVMF/OVMF_VARS.fd}"
        fi

elif [ "$arch" = aarch64 ]; then

        # Enable uefi mode
        uefi=1

        # Obtain uefiCode and uefiVars from
        # Homebrew path on macOS
        if [ "$running_os" = macos ]; then
                # Test for HomeBrew path
                homeBrewPrefix=$(brew info qemu | awk 'NR==4{print $1}')
                uefiCode="${uefiCode:-$homeBrewPrefix/share/qemu/edk2-aarch64-code.fd}"
                uefiVars="${uefiVars:-$homeBrewPrefix/share/qemu/edk2-arm-vars.fd}"
        else
                uefiCode="${uefiCode:-/usr/share/AAVMF/AAVMF_CODE.fd}"
                uefiVars="${uefiVars:-/usr/share/AAVMF/AAVMF_VARS.fd}"
        fi

fi


if [ "$pxe" ] && [ "$uefi" ]; then
	pxe_binary="$pxe"
	pxe=
fi


# Adding the disks (using parameters without - or --)
inflatelist=( )
diskcount=0

if [ "$arch" = "x86_64" ]; then
        [ "$#" == "" ] || virtOpts+=(     "-device virtio-scsi-pci,id=scsi0" )
fi

while (( "$#" )); do
	imagefile=$1
	imagesize=0
	imagedirect=""
	if [[ $imagefile == *","* ]]; then	imagesize=${imagefile##*,}	# check if a ,3G or such is present
						imagefile=${imagefile%%,$imagesize}; fi
	[ "$imagefile" == "" ] && 		imagefile=$(mktemp --suff=.raw)  # if no filename is left point to tmp
	[[ $imagefile == *"."* ]] &&		imageext=${imagefile##*.};
	[ -e $imagefile ] || eusage "file \"$imagefile\" does not exist"

	imagesizeBytes=$(numfmt --from=iec --suffix="B" --format "%f" ${imagesize} | $gnu_head -c-2)  # calculate in bytes
	imageext=${imageext/^vhd$/vpc}

	if [ "$imageext" == "iso" ]; then
		virtOpts+=(	"-drive media=cdrom,file=$imagefile,readonly" )
	elif [ -d $imagefile ]; then
		targetDir=$imagefile
	else
		# test if direct access is possible
		dd if=$imagefile of=/dev/null count=1 iflag=direct 2> /dev/null && imagedirect="aio=native,cache.direct=on,"

		# if there is a bigger size, we need to inflate
		[ $($gnu_stat --printf="%s" $imagefile) -lt ${imagesizeBytes} ] && inflatelist+=( "${imagefile},${imagesizeBytes}" )
                if [ "$arch" = x86_64 ]; then
		        virtOpts+=(	"-device scsi-hd,drive=drive${diskcount},bus=scsi0.0"
			        	"-drive format=${imageext},if=none,discard=unmap,${imagedirect}id=drive${diskcount},file=${imagefile}" )
                else
		        virtOpts+=(	"-drive if=virtio,format=${imageext},file=$imagefile" )
                fi
		(( ++diskcount ))
	fi
	shift
done
[ $diskcount -gt 0 -o "$pxe" -o "$pxe_binary" ] || eusage 'missing bootdisk. boot via --pxe, provide tmpdisk via --disk or provide bootdisk image file'

[[ "${memory: -1}" =~ [0-9] ]] && memory="${memory}Mi"
memory=$(numfmt --from=auto --suffix="B" --format "%f" ${memory} | $gnu_head -c-2)
virtOpts+=(	"-smp $cpu"
	   	"-m $(( $memory / 1048576 ))" )

# Unsupported options on CentOS
if [ "centos" != $running_os ]; then
    if [ "macos" != $running_os ]; then
        # add a watchdog to maintain automatic reboots
        virtOpts+=(	"-watchdog i6300esb" )
    fi
fi

# remove default things like floppies, serial port, parallel port
virtOpts+=(	"-nodefaults" )

if [ "$arch" = "x86_64" ]; then
        # make sure to use minimal memory
        virtOpts+=(	"-device virtio-balloon" )

        # adding the random number generator of the host
        virtOpts+=(	"-device virtio-rng-pci,rng=rng0"
	   	        "-object rng-random,id=rng0,filename=/dev/random" )

        # Unsupported options on CentOS
        if [ "centos" != $running_os ]; then
                if [ "$arch" = x86_64 ]; then
	                # adding a bmc simulator
        	        virtOpts+=(	"-device ipmi-bmc-sim,id=bmc0"
        			        "-device isa-ipmi-kcs,bmc=bmc0,ioport=0xca2"  )
                fi
        fi

        # support for qemu guest agent. There is no way for this script if inside VM is connected or not
        virtOpts+=(     "-chardev socket,path=$tmpDir/$mac.guest,server=on,wait=off,id=qga0"
                        "-device virtio-serial"
                        "-device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0" )

fi

# adding a uuid since this is expected by systemd and gardenlinux
mac="$(printf "%012s" | tr -d ":" <<< ${mac,,})"
macfull="$(sed 's/../&:/g;s/:$//' <<< $mac)"
uuid="12345678-0000-0000-0000-${mac}"
virtOpts+=(     "-uuid $uuid" )


# Validate x86_64 arch
if [ "$arch" = x86_64 ]; then

    # Validate for native or emulated arch
    if [ "$arch" = "$(uname -m)" ]; then

        # Running on native arch
        # Check for acceleration support
        if [ "$running_os" = macos ]; then
            # macOS HVF support is always given on all new Intel Macs
            # that are supported by the current HomeBrew version
            virtOpts+=("-cpu host" "-accel hvf")

        else

            # Validate for KVM support on x86_64
            # If no KVM support is present QEMU handles
            # the -cpu option itself
            if [ -w "/dev/kvm" ]; then
                virtOpts+=("-enable-kvm" "-cpu host" "-machine q35,smm=on")
            else
                echo -e "WARNING: Can not use KVM acceleration. Please see:\n https://github.com/gardenlinux/gardenlinux/tree/main/bin#start-vm \n\n"
            fi

        fi

    else
        # Running on emulated arch
        # Set default CPU on emulated arch
        virtOpts+=("-cpu Broadwell")

    fi

fi


# Validate AARCH64/ARM64 arch
if [ "$arch" = aarch64 ]; then

    # Evaluate possible ARM64 arch outputs
    testArch="undefined"
    if [ "arm64" = $(uname -m) ]; then
        testArch="aarch64"
    fi
    if [ "aarch64" = $(uname -m) ]; then
        testArch="aarch64"
    fi

    # Validate for native or emulated arch
    if [ "$arch" = "$testArch" ]; then

        # Running on native arch
        # Check for acceleration support
        if [ "$running_os" = macos ]; then
            # macOS HVF support is always given on all new Intel Macs
            # that are supported by the current HomeBrew version
            virtOpts+=("-cpu host" "-machine virt" "-accel hvf")

        else

            # Validate for KVM support on AARCH64
            if [ -w "/dev/kvm" ]; then
                virtOpts+=("-cpu host" "-machine virt" "-accel kvm")
            else
                echo -e "WARNING: Can not use KVM acceleration. Please see:\nhttps://github.com/gardenlinux/gardenlinux/tree/main/bin#start-vm \n\n"
                virtOpts+=("-cpu max" "-machine virt")
            fi

        fi

    else

        # Running on emulated arch
        # Set default CPU on emulated arch
        virtOpts+=("-cpu max" "-machine virt")

    fi

fi


# adding a monitoring port for extended commands
if [ $monitor ]; then
	[ -e $tmpDir/$mac.monitor ] && eusage "monitor to this macaddress already exists $targetDir/$mac.monitor"
	virtOpts+=(	"-monitor unix:$tmpDir/$mac.monitor,server,nowait" )
fi

[ $daemonize ] && virtOpts+=(	"-daemonize" )
[ $daemonize ] || virtOpts+=(	"-nographic"
				"-serial mon:stdio" )
[ $vnc ] && 	  virtOpts+=(	"-vnc :${vncport},password" )
[ $daemonize ] && [ ! $vnc ] && virtOpts+=(	"-display none" )

if [ $uefi ]; then
	[ -r $uefiCode ] || eusage "Missing ueficode at $ueficode.\n Run: apt-get install ovmf"
	[ -r $uefiVars ] || eusage "Missing uefivars at $uefiVars.\n Run: apt-get install ovmf"

	[ -e $targetDir/$mac.vars ] || cp $uefiVars $targetDir/$mac.vars

	if [ "$arch" = x86_64 ]; then
		virtOpts+=("-global driver=cfi.pflash01,property=secure,value=on")
	fi

	virtOpts+=("-drive if=pflash,format=raw,unit=0,file=${uefiCode},readonly=on"
	           "-drive if=pflash,format=raw,unit=1,file=$targetDir/$mac.vars")
fi

# pxe
if [ $pxe ]; then
	if [ "$ignfile" ]; then
		pxefile=$thisDir/../examples/ipxe/start-vm-ignition.ipxe
	fi
	[ -e "$targetDir/$mac.ipxe" ] || cp $pxefile $targetDir/$mac.ipxe

	glbuilds=()
	glbuild=""
	for v in $(find "$pxe" -type f -name '*.vmlinuz' -exec basename {} \; | cut -d. -f 1); do
		glbuilds+=(${v})
	done
	if [ "${#glbuilds[@]}" == "0" ]; then
		echo "no vmlinuz found!" 1>&2
		exit 1
	elif [ "${#glbuilds[@]}" == "1" ]; then
		glbuild="${glbuilds[0]}"
	else
		echo "Multiple builds found, which one should be used?"
		for i in ${!glbuilds[@]}; do
			echo "[$i] ${glbuilds[i]}"
		done
		echo -n "ENTER entry number : "
		read n
		if [[ ! "$n" =~ ^[0-9]+$ ]] ; then
			echo "Not a valid entry number"
			exit 1
		fi
		if [[ "$n" -gt "${#glbuilds[@]}" ]]; then
			echo "Not a valid entry"
			exit 1
		fi
		glbuild="${glbuilds[${n}]}"
	fi


	# modify the boot.ipxe to load the proper kernel and initramfs
	sed -i "s/PATHGOESHERE//g;s/IPADDRESSGOESHERE/10.0.2.2/g" $targetDir/$mac.ipxe

	virtOpts+=( -boot order=nc )
fi

if [ "$pxe_binary" ]; then
	cp "$pxe_binary" "$targetDir/$mac.efi"
	virtOpts+=( -boot order=nc )
fi

# handling the network
if [ $pxe_binary ]; then virtOpts+=( "-device virtio-net-pci,romfile=,netdev=net0,mac=$macfull" )
else virtOpts+=( "-device virtio-net-pci,netdev=net0,mac=$macfull" )
fi

if [ $bridge ]; then 	virtOpts+=(	"-netdev bridge,id=net0,br=${bridge}" )
elif [ $pxe ]; then	virtOpts+=( 	"-netdev user,id=net0,hostfwd=tcp::$port-:22,hostname=garden,tftp=$targetDir,bootfile=$mac.ipxe" )
elif [ $pxe_binary ]; then virtOpts+=( "-netdev user,id=net0,hostfwd=tcp::$port-:22,hostname=garden,tftp=$targetDir,bootfile=$mac.efi" )
else			virtOpts+=( 	"-netdev user,id=net0,hostfwd=tcp::$port-:22,hostname=garden" )
fi

[ $bridge ] && ( [ -e /sys/class/net/$bridge/bridge ] || eusage "interface $bridge is no bridge" )

# status report
printf "Status:\n"
printf "  starting VM(UUID:%s) with MAC:%s in %s\n" $uuid $macfull $targetDir
[ $monitor ]	&& printf "  monitor: %s.monitor\tconnect: socat - UNIX-CONNECT:%s\n" $mac $targetDir/$mac.monitor
[ $pxe ]	&& printf "  pxeboot: %s.ipxe\n" $mac
[ $pxe ]	&& printf "  pxeboot: files served from %s\n" "$pxe"
[ $bridge ]	&& printf "  interface: %s  bridged\n" $bridge
[ $bridge ]	|| printf "  sshport: %s  unbridged\n" $port
[ $vnc ] 	&& printf "  vncport: %s\n" $(( vncport + 5900 ))
[ $uefi ]	&& printf "  uefi boot enabled. %s.vars stores efivars\n" $mac
for i in "${inflatelist[@]}"; do
	printf "  file: %s will be inflated to %s\n" $(cut -d, -f1 <<< "$i") $(cut -d, -f2 <<< "$i")
done
( printf "\n  commandline: qemu-system-%s " $arch
printf '%s ' "${virtOpts[@]}";printf "\n" ) | sed 's/ /!/g;s/!-/ -/g' | fold -s -w $(( $(tput cols) - 4 )) | sed 's/!/ /g;3,$ s|^|    |'
[ $keypress ]	&& read -n 1 -r -s -p $'Press any key to continue...\n'

# pxe helper container
if [ $pxe ]; then
	containerName=$(cat /proc/sys/kernel/random/uuid)
	function stop(){
		echo "removing symlinks"
		rm  "$pxe/root."{vmlinuz,initrd,squashfs}
		echo "stopping helper for pxe"
		${gardenlinux_build_cre} stop -t 0 $1
		[[ ! -s "$pxe/ignition.json" ]] && rm -f "$pxe/ignition.json"
		echo "everything stopped..."
	}
	echo
	if [[ -f "${pxe}/${glbuild}.vmlinuz" ]]; then ln -sf "$glbuild.vmlinuz" "$pxe/root.vmlinuz"; else echo "Missing ${glbuild}.vmlinuz, exiting"; exit 1; fi
	if [[ -f "${pxe}/${glbuild}.initrd" ]]; then ln -sf "$glbuild.initrd" "$pxe/root.initrd"; else echo "Missing ${glbuild}.initrd, exiting"; exit 1; fi
	if [[ -f "${pxe}/${glbuild}.squashfs" ]]; then ln -sf "$glbuild.squashfs" "$pxe/root.squashfs"; else echo "Missing ${glbuild}.squashfs, exiting"; exit 1; fi
	trap 'stop $containerName' EXIT
	echo "starting helper container"
	if [ "$ignfile" ]; then
		${gardenlinux_build_cre} run -it --rm -d -p 127.0.0.1:8888:80 --name ${containerName} -v ${pxe}:/usr/share/nginx/html -v ${ignfile}:/usr/share/nginx/html/ignition.json nginx
	else
		${gardenlinux_build_cre} run -it --rm -d -p 127.0.0.1:8888:80 --name ${containerName} -v ${pxe}:/usr/share/nginx/html:ro nginx
	fi
fi

### from here on things are actually done!!!
# modifying /etc/qemu/bridge.conf - would be good to be root!!!
if [ $bridge ]; then
	[ $(id -u) == 0 ] || eusage "for bridging you must be root"
	if [ ! -d /etc/qemu ]; then
		mkdir -p /etc/qemu
		chown root:kvm /etc/qemu
	fi
	if [ ! -e /etc/qemu/bridge.conf ]; then
	       	touch /etc/qemu/bridge.conf
		chown root:kvm /etc/qemu/bridge.conf
		chmod 0640 /etc/qemu/bridge.conf
	fi

	printf "%s\nallow %s\n" "$(cat /etc/qemu/bridge.conf)" $bridge > $targetDir/$mac.bridge
	awk '!seen[$0]++' < $targetDir/$mac.bridge > /etc/qemu/bridge.conf
	rm -f $targetDir/$mac.bridge
fi
# inflating selected files
for i in "${inflatelist[@]}"; do
	dd if=/dev/zero of=$(cut -d, -f1 <<< "$i") count=0 bs=1 seek=$(cut -d, -f2 <<< "$i") 2> /dev/null
done
# creating a separate thread to set the VNC password
if [ $vnc ]; then
	( while [ ! -e $targetDir/$mac.monitor ]; do sleep 0.1; done
	printf "change vnc password\n%s\n" MYPASSWORD | socat - UNIX-CONNECT:$targetDir/$mac.monitor &> /dev/null )&
fi

# Start QEMU with virtOpts
if [ "centos" = $running_os ]; then
        /usr/libexec/qemu-kvm ${virtOpts[@]}
else
        qemu-system-$arch ${virtOpts[@]}
fi
