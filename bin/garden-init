#!/usr/bin/env bash
# Contains sources from https://github.com/debuerreotype/debuerreotype
set -Eeuo pipefail

thisDir="$(dirname "$(readlink -f "$BASH_SOURCE")")"
source "$thisDir/.constants.sh" \
	--flags 'debian,debian-ports,debian-mirror,non-debian' \
	--flags 'debootstrap:' \
	--flags 'debootstrap-script:' \
	--flags 'keyring:,keyring-plain:,arch:,include:,exclude:,features:' \
	--flags 'check-gpg,no-check-gpg' \
	-- \
	'<target-dir> <version> <timestamp>' \
	'rootfs 520.0 2017-05-08T00:00:00Z' \
	\
	'--non-debian [--debootstrap-script=xyz] <target-dir> <suite> <version> <mirror>' \
	'--non-debian rootfs xenial http://archive.ubuntu.com/ubuntu'

eval "$dgetopt"
nonDebian=
debianPorts=
debianMirror=0
debootstrap=
script=
keyring=
keyringPlain=
arch=
include=
exclude=
features=
noMergedUsr=
noCheckGpg=

# Update all param flags
while true; do
	flag="$1"; shift
	dgetopt-case "$flag"
	case "$flag" in
		--debian)		nonDebian= ;;
		--debian-ports)		nonDebian= ; debianPorts=1 ;;
		--debian-mirror)	debianMirror=1 ;;
		--non-debian)		nonDebian=1 ;;
		--debootstrap)		debootstrap="$1"; shift ;;
		--debootstrap-script) 	script="$1"; shift ;;
		--keyring)		keyring="$1"; shift ;;
		--keyring-plain) 	keyringPlain="$1"; shift ;;
		--arch)			arch="$1"; shift ;;
		--include)		include="${include:+$include,}$1"; shift ;;
		--exclude)		exclude="${exclude:+$exclude,}$1"; shift ;;
		--features)		features="${features:+$features,}$1"; shift ;;
		--check-gpg)		noCheckGpg=  ;;
		--no-check-gpg)		noCheckGpg=1 ;;
		--) break ;;
		*)		eusage "unknown flag '$flag'" ;;
	esac
done

targetDir="${1:-}"; shift || eusage 'missing target-dir'

[ -n "$targetDir" ] || eusage 'target-dir required' # must be non-empty

if [ -e "$targetDir" ] && [ -z "$(find "$targetDir" -maxdepth 0 -empty)" ]; then
	echo >&2 "error: '$targetDir' already exists (and isn't empty)!"
	exit 1
fi

suite="${1:-}"; shift || eusage 'missing suite'
version="${1:-}"; shift || eusage 'missing version'
timestamp=
mirror=

if [ -z "$nonDebian" ]; then
	timestamp="${1:-}"; shift || eusage 'missing timestamp'
else
	mirror="${1:-}"; shift || eusage 'missing mirror'

	timestamp="$(
		{
			wget -qO- "$mirror/dists/$suite/InRelease" 2>/dev/null \
				|| wget -qO- "$mirror/dists/$suite/Release"
		} |tac|tac| awk -F ': ' '$1 == "Date" { print $2; exit }'
	)"
	# TODO re-calculate "timestamp" during garden-tar/fixup (possibly scraping from /var/lib/apt/lists/*Release* instead?)
fi

epoch="$(date --date "$timestamp" '+%s')"
export SOURCE_DATE_EPOCH="$epoch"

mirror="https://repo.gardenlinux.io/gardenlinux"

include="$(tr "," "\n" <<< $include)"$'\n'
exclude="$(tr "," "\n" <<< $include)"$'\n'

[ -s $featureDir/pkg.include ] && include+="$(cat $featureDir/pkg.include)"$'\n'
[ -s $featureDir/pkg.exclude ] && exclude+="$(cat $featureDir/pkg.exclude)"$'\n'

for i in $(tr ',' '\n' <<< $features); do
	[ -s $featureDir/$i/pkg.include ] && include+="$(cat $featureDir/$i/pkg.include)"$'\n'
	[ -s $featureDir/$i/pkg.exclude ] && exclude+="$(cat $featureDir/$i/pkg.exclude)"$'\n'
done

include_aptversion=
include_aptfile=
include_wget=
exclude="$(filter_comment <<< $exclude | filter_variables | filter_if)"

for i in $(filter_comment <<< $include | filter_variables | filter_if | grep -v -f <(echo "$exclude")); do
    if [[ $i = *.deb ]]; then
	if [[ $i = *://* ]]; then	include_wget+="$i "
	fi
	include_aptfile+="./$(basename $i) "
    else 			include_aptversion+="$i "
    fi
done
exclude="$(paste -sd, - <<< $exclude)"

## Define debootstrap arguments
debootstrapArgs=()

# Set GPG check
if [ -z "$noCheckGpg" ]; then
	debootstrapArgs+=( --force-check-gpg )
else
	debootstrapArgs+=( --no-check-gpg )
fi

# Set variant
debootstrapArgs+=( --variant=minbase )

# Set custom package includes from Garden Linux repository
debootstrapArgs+=( --include=garden-repo-manager )

[ -z "$keyring" ] || debootstrapArgs+=( --keyring="$keyring" )
[ -z "$arch" ] || debootstrapArgs+=( --arch="$arch" )

debootstrapArgs+=(
	"$version" "$targetDir" "$mirror"
)
[ -z "$script" ] || debootstrapArgs+=( "$script" )

: "${debootstrap:=debootstrap}"
echo "$debootstrap ${debootstrapArgs[@]}"

if ! "$debootstrap" "${debootstrapArgs[@]}"; then
	if [ -f "$targetDir/debootstrap/debootstrap.log" ]; then
		echo >&2
		echo >&2 "error: '$debootstrap' failed!"
		echo >&2
		echo >&2 '  Full command:'
		echo >&2
		echo >&2 "   $(printf ' %q' "$debootstrap" "${debootstrapArgs[@]}")"
		echo >&2
		echo >&2 '  Logs:'
		echo >&2
		cat >&2 "$targetDir/debootstrap/debootstrap.log"
		echo >&2
	fi
	exit 1
fi

echo "$epoch" > "$targetDir/garden-epoch"

# Set DEB822 as default
echo "Prepare DEB822 repo format"
"$thisDir/garden-chroot" "$targetDir" bash -c "
	rm /etc/apt/sources.list
"

# Add support for local packages
if [[ -v PKG_DIR ]]; then
	# Create repository Packages file
	pushd "$PKG_DIR"
	dpkg-scanpackages --multiversion . /dev/null > Packages
	popd

	# Mount package directroy
	mkdir "$targetDir/run/packages"
	mount --rbind --make-rslave "$PKG_DIR" "$targetDir/run"

	# Add local package reposiotiry
	echo "Local packages will be added as a repository"
	"$thisDir/garden-chroot" "$targetDir" bash -c "
		/sbin/garden-repo-manager add local -p /run/ -a $arch
	"
fi

# Add basic repositories
if [ -z "$nonDebian" ]; then

	# Copy Garden Linux repository key
	cp "$keyringPlain" "$targetDir/etc/apt/trusted.gpg.d/gardenlinux.asc"

	# Add repositories to Garden Linux
	if [ $debianMirror -eq 1 ]; then
		# Integrate Garden Linux repository with additional Debian native mirror
		# DO NOT USE THIS FOR PRODUCTION RELEASES
		"$thisDir/garden-chroot" "$targetDir" bash -c "
			/sbin/garden-repo-manager add gardenlinux -a $arch && \
			/sbin/garden-repo-manager add debian testing -c main contrib -a $arch
		"
	else
		# Integrate Garden Linux repository
		"$thisDir/garden-chroot" "$targetDir" bash -c "
			/sbin/garden-repo-manager add gardenlinux -a $arch -t $version
		"
	fi

	# Update repositories
	"$thisDir/garden-apt-get" "$targetDir" update -qq
	"$thisDir/garden-apt-get" "$targetDir" upgrade -y
fi

# since we're minbase, we know everything included is either essential, or a dependency of essential, so let's get clean "apt-mark showmanual" output
"$thisDir/garden-chroot" "$targetDir" bash -c '
	if apt-mark --help &> /dev/null; then
		apt-mark auto ".*" > /dev/null
		if [ -n "$1" ]; then
			# if the user asked for anything to be included extra (like "xyz-archive-keyring"), mark those packages as manually installed
			IFS=","; includePackages=( $1 ); unset IFS
			apt-mark manual "${includePackages[@]}"
		fi
	fi
'

set -x
tmp=$(mktemp -d -p $targetDir)

if [ "${include_wget}" != "" ]; then
	for pkg in $include_wget; do
		wget -O "${tmp}/$(${thisDir}/get_filename ${pkg})" "$(${thisDir}/urlescape ${pkg})"
	done
fi

# INITRD="No" - really hackish solution to skip ramdisk generation
[ "${include_aptfile}" != "" ] &&
"$thisDir/garden-chroot" "$targetDir" bash -c '
	cd '${tmp#$targetDir}'
	INITRD="No" DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades --no-install-recommends -f $1
' -- "$include_aptfile"
rm -rf $tmp

[ "${include_aptversion}" != "" ] &&
"$thisDir/garden-chroot" "$targetDir" bash -c '
	INITRD="No" DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades --no-install-recommends -f $1
' -- "$include_aptversion"

# fix ownership/permissions on / (otherwise "debootstrap" leaves them as-is which causes reproducibility issues)
chown 0:0 "$targetDir"
chmod 0755 "$targetDir"

# inject qemu-arm-static binary
chrootUsrBinDir="/usr/bin/"

# Set qemu static binary for crosscompile
if [ "$arch" = amd64 ]; then
    qemuStaticBin="/usr/bin/qemu-x86_64-static"
else
    qemuStaticBin="/usr/bin/qemu-aarch64-static"
fi
cp "$qemuStaticBin" "$targetDir/$chrootUsrBinDir"

# https://bugs.debian.org/857803
# adjust field 3 in /etc/shadow and /etc/shadow- to $(( epoch / 60 / 60 / 24 )), if it's larger
sp_lstchg="$(( epoch / 60 / 60 / 24 ))"
for shadowFile in etc/shadow etc/shadow-; do
	[ -e "$targetDir/$shadowFile" ] || continue

	newShadowFile="$shadowFile.debuerreotype"
	awk -F ':' \
		-v OFS=':' \
		-v sp_lstchg="$sp_lstchg" \
		'{
			if ($3 > sp_lstchg) {
				$3 = sp_lstchg
			}
			print
		}' "$targetDir/$shadowFile" > "$targetDir/$newShadowFile"
	if [ "$(< "$targetDir/$shadowFile")" != "$(< "$targetDir/$newShadowFile")" ]; then
		# use "cat" instead of "mv" so permissions don't change
		cat "$targetDir/$newShadowFile" > "$targetDir/$shadowFile"
	fi
	rm -f "$targetDir/$newShadowFile"
done
