#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import json
import time

class GcpImageBuild:

    def __init__(self, bucket, raw_image_path, image_name, permission):
        self.bucket = bucket
        self.raw_image_path = raw_image_path
        self.image_name = image_name
        self.permission = permission

    def logged_on_bucket_available(self, bucket):
        bucket_name = "gs://" + bucket + "/"
        result = subprocess.run(["gsutil", "ls", "-L", "-b", bucket_name], capture_output=True)
        if result.returncode != 0:
            sys.exit("Bucket " + bucket + " does not exist or not logged on: " + result.stderr)

    def upload_image(self, bucket, raw_image_path, image_name):
        bucket_image = "gs://" + bucket + "/" + image_name + ".tar.gz"
        result = subprocess.run(["gsutil", "-q", "stat", bucket_image], capture_output=True)
        if result.returncode == 0:
            sys.exit("Image " + bucket_image + " already exists.")

        print ("Uploading %s to %s" % (raw_image_path, bucket_image))
        result = subprocess.run(["gsutil", "cp", raw_image_path, bucket_image], capture_output=True)
        if result.returncode != 0:
            print(result.stdout)
            sys.exit("Unable to upload image " + raw_image_path + ": " + str(result.stdout) + " " + str(result.stderr))

    def create_image(self, bucket, image_name):
        result = subprocess.run(["gcloud", " compute", "images", "describe", image_name], capture_output=True)
        if result.returncode == 0:
            sys.exit("Image " + image + " does already exist.")
        bucket_image = "gs://" + bucket + "/" + image_name + ".tar.gz"
        result = subprocess.run(["gcloud", "compute", "images", "create", image_name,
            "--source-uri", bucket_image ],
            capture_output=True)
        if result.returncode != 0:
            print(result.stdout)
            sys.exit("Unable to create image " + image_name+ ": " + str(result.stdout) + " " + str(result.stderr))
        if self.permission == True:
            result = subprocess.run(["gcloud", "compute", "images", "add-iam-policy-binding", image_name,
                "--member", "allAuthenticatedUsers", "--role", "roles/compute.imageUser" ],
                capture_output=True)
            print(result)

    def run(self):
        self.logged_on_bucket_available(self.bucket)
        self.upload_image(self.bucket, self.raw_image_path, self.image_name)
        self.create_image(self.bucket, self.image_name)

    @classmethod
    def _argparse_register(cls, parser):

        parser.add_argument(
            '--bucket',
            type=str,
            dest='bucket',
            help='Upload bucket',
            required=True
        )
        parser.add_argument(
            '--raw-image-path',
            type=str,
            help="RAW image file tar.gz file"
        )
        parser.add_argument(
            '--image-name',
            type=str,
            help="Image name on GCP"
        )
        parser.add_argument(
            '--permission-public',
            type=bool,
            default=False,
            help='Make snapshot and image public',
        )

    @classmethod
    def _main(cls):
        parser = argparse.ArgumentParser()
        cls._argparse_register(parser)
        args = parser.parse_args()
        print(args)

        gcp_img_build = cls(bucket=args.bucket, raw_image_path=args.raw_image_path, image_name=args.image_name, permission=args.permission_public)
        gcp_img_build.run()

if __name__ == '__main__':
    GcpImageBuild._main()
