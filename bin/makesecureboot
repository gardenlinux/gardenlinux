#!/usr/bin/env bash

set -Eeufo pipefail

export PKCS11_MODULE_PATH="/usr/lib/$(uname -m)-linux-gnu/pkcs11/aws_kms_pkcs11.so"

veritytab=
cert_base="/cert/secureboot.db"
timestamp=0
secureboot="true"

while [ $# -gt 0 ]; do
	case "$1" in
		-r|--rootfs)
			rootfs="$2"
			shift 2
			;;
		-c|--cmdline)
			cmdline="$2"
			shift 2
			;;
		-v|--veritytab)
			veritytab="$2"
			shift 2
			;;
		--cert)
			cert_base="${2%.crt}"
			if [ -n "$cert_base" ] && [ "$cert_base.crt" != "$2" ]; then
				echo "cert file must end in .crt" >&2
				exit 1
			fi
			shift 2
			;;
		-t|--timestamp)
			timestamp="$2"
			shift 2
			;;
		-s|--secureboot)
			secureboot="$2"
			shift 2
			;;
		*)
			break
			;;
	esac
done

initrd="$(mktemp)"
unified_image="$(mktemp)"
unified_image_signed="$(mktemp)"

[ ! -e "$rootfs$initrd" ]
touch "$rootfs$initrd"
mount --bind "$initrd" "$rootfs$initrd"
[ ! -s "$rootfs/etc/veritytab" ]
touch "$rootfs/etc/veritytab"
[ -z "$veritytab" ] || mount --bind "$veritytab" "$rootfs/etc/veritytab"
[ -d "$rootfs/proc" ] && [ -z "$(ls -A "$rootfs/proc")" ]
mount -t proc none "$rootfs/proc"

kernel_file=$(find "$rootfs/boot/" -name 'vmlinuz-*')
kernel_version="${kernel_file#*-}"

chroot "$rootfs" dracut \
	--force \
	--kver "$kernel_version" \
	--modules "bash dash systemd systemd-initrd systemd-veritysetup kernel-modules kernel-modules-extra terminfo udev-rules dracut-systemd base fs-lib shutdown" \
	--install "/etc/veritytab" \
	--reproducible \
	"$initrd"

umount "$rootfs/proc"
umount "$rootfs$initrd"
rm "$rootfs$initrd"
umount "$rootfs/etc/veritytab"
rm "$rootfs/etc/veritytab"

case "$arch" in
	amd64)
		uefi_arch=X64
		gnu_arch=x86_64
		initrd_vma=0x3000000
		;;
	arm64)
		uefi_arch=AA64
		gnu_arch=aarch64
		initrd_vma=0x4000000
		;;
esac

# create unified image
cmdline_file=$(mktemp)
echo "$cmdline" > "$cmdline_file"
"${gnu_arch}-linux-gnu-objcopy" \
	--add-section .cmdline="$cmdline_file" --change-section-vma .cmdline=0x1000000 \
	--add-section .linux="$kernel_file" --change-section-vma .linux=0x2000000 \
	--add-section .initrd="$initrd" --change-section-vma .initrd="$initrd_vma" \
	"$rootfs/usr/lib/systemd/boot/efi/linux$(tr '[:upper:]' '[:lower:]' <<< "$uefi_arch").efi.stub" "$unified_image"
rm "$cmdline_file"

efi_dir="$(mktemp -d)"
mkdir -p "$efi_dir/EFI/BOOT/"

if [[ "$secureboot" = "true" ]]; then
	if [ -f "$cert_base.key" ]; then
		key_params=(--key "$cert_base.key")
	elif [ -f "$cert_base.arn" ]; then
		key_params=(--engine pkcs11 --key "pkcs11:token=$(basename "$(cat "$cert_base.arn")" | cut -c -32)")
	else
		echo "neither $cert_base.key nor $cert_base.arn exists, but at least one is required" >&2
		exit 1
	fi

	# sign unified image
	datefudge -s "@$timestamp" sbsign --cert "$cert_base.crt" "${key_params[@]}" --output "$unified_image_signed" "$unified_image"
	rm "$unified_image"

	mv "$unified_image_signed" "$efi_dir/EFI/BOOT/BOOT$uefi_arch.EFI"
else
	mv "$unified_image" "$efi_dir/EFI/BOOT/BOOT$uefi_arch.EFI"
fi

while read -r partition_file; do
	if [[ "$arch" = "amd64" ]] && [[ ! "$secureboot" = "true" ]]; then
	# add roothash to legacy boot kernel cmdline
		syslinux=$(mktemp)
		mcopy -i $partition_file -p ::/syslinux/syslinux.cfg "$syslinux"
		sed -i "s/root=[^ ]*/$(echo ${cmdline} | cut -d ' ' -f 1)/g" "$syslinux"
		mcopy -i $partition_file -po "$syslinux" ::/syslinux/syslinux.cfg
	# copy initrd.img for legacy boot when secureboot feature is not enabled
		datefudge -s "@$timestamp" mcopy -i "$partition_file" -o -p "$initrd" "::/Default/${kernel_version}/initrd.img-${kernel_version}"
		datefudge -s "@$timestamp" mcopy -i "$partition_file" -o -p "$initrd" "::/legacy/${kernel_version}/initrd.img-${kernel_version}"
	fi
	if [[ ! "$secureboot" = "true" ]]; then
	# clean up EFI directory
		mdeltree -i "$partition_file" ::/EFI
	fi
	# copy unified image to uefi partition
	datefudge -s "@$timestamp" mcopy -i "$partition_file" -s -p "$efi_dir/EFI" "::/EFI"
done

rm "$initrd"
rm -rf "$efi_dir"
