#!/bin/bash

set -Eeufo pipefail

mount_target=/
fs=ext4
options=ro
type=linux
ephemeral=0
cryptsetup=0
weight=1
def_only=0

while [ $# -gt 0 ]; do
	case "$1" in
		-t|--target)
			mount_target="$2"
			shift 2
			;;
		-f|--fs)
			fs="$2"
			shift 2
			;;
		-o|--options)
			options="$2"
			shift 2
			;;
		-g|--gpt-type)
			type="$2"
			shift 2
			;;
		-e|--ephemeral)
			ephemeral="$2"
			shift 2
			;;
		-c|--cryptsetup)
			cryptsetup="$2"
			shift 2
			;;
		-w|--weight)
			weight="$2"
			shift 2
			;;
		-d|--def-only)
			def_only=1
			shift
			;;
		*)
			break
			;;
	esac
done

# repart uses different labels for GPT type UUIDs than fdisk
case "$type" in
	"linux") repart_type="linux-generic" ;;
	"uefi") repart_type="esp" ;;
	*) repart_type="$type" ;;
esac

if [ "$def_only" = 1 ]; then
	repart="$1"
	target="$2"
	mkdir -p "$target/etc/repart.d"
	cat > "$target/etc/repart.d/0.$(printf '%02d' "$repart").conf" <<-EOF
	[Partition]
	Type=$repart_type
	Weight=0
	EOF
	exit 0
fi

repart="$1"
source="$2"
target="$3"

[ -d "$source" ]
[ -d "$target" ]

repart_uuid="$(echo "gardenlinux:$version:repart:$mount_target:$fs" | uuid_hash)"

sysroot_target="/sysroot${mount_target%/}"
sysroot_target_escaped="$(systemd-escape "${sysroot_target#/}")"
sysroot_mount_unit="$sysroot_target_escaped.mount"

mkdir -p "$target/etc/repart.templates"
cp -a "$source" "$target/etc/repart.templates/$repart_uuid"

mkdir -p "$target/etc/repart.d"

if [ ! -e "$target/etc/systemd/system/blockdev-settle@.service" ]; then
	mkdir -p "$target/etc/systemd/system/"
	cat > "$target/etc/systemd/system/blockdev-settle@.service" <<-EOF
	[Unit]
	After=%i.device
	Requires=%i.device
	[Service]
	Type=oneshot
	RemainAfterExit=yes
	ExecStart=/usr/bin/bash -c 'udevadm settle && [ -b "/%I" ]'
	EOF
fi

if [ ! -e "$target/usr/bin/make_ephemeral_cryptsetup" ]; then
	mkdir -p "$target/usr/bin/"
	cat > "$target/usr/bin/make_ephemeral_cryptsetup" <<-EOF
	#!/bin/bash

	set -Eexufo pipefail

	data_source="\$1"
	mapper_name="\$2"
	dev="\$3"

	key_file="/run/cryptsetup-\$mapper_name.key"
	head -c 1K < /dev/random > "\$key_file"

	cryptsetup luksFormat --batch-mode --integrity hmac-sha256 --key-file "\$key_file" "\$dev"
	cryptsetup luksOpen --key-file "\$key_file" "\$dev" "\$mapper_name"

	rm "\$key_file"

	mkfs.ext4 -d "\$data_source" "/dev/mapper/\$mapper_name"
	EOF
	chmod +x "$target/usr/bin/make_ephemeral_cryptsetup"
fi

if [ "$ephemeral" = 1 ]; then
	mkdir -p "$target/etc/systemd/system-generators"
	cat > "$target/etc/systemd/system-generators/repart-$repart" <<-EOF_GENERATOR
	#!/bin/bash
	set -ex

	mkdir -p "/etc/repart.uuid"
	[ -f "/etc/repart.uuid/$repart_uuid" ] || cat /proc/sys/kernel/random/uuid > "/etc/repart.uuid/$repart_uuid"
	uuid="\$(cat "/etc/repart.uuid/$repart_uuid")"

	cat > "/etc/repart.d/1.$repart.conf" << EOF
	[Partition]
	UUID=\$uuid
	Type=$repart_type
	Weight=$weight
	Format=$fs
	CopyFiles=/etc/repart.templates/$repart_uuid:/
	FactoryReset=true
	EOF

	dev_path="/dev/disk/by-partuuid/\$uuid"
	systemd_dev_dependency="blockdev-settle@\$(systemd-escape \${dev_path#/}).service"
	cat > "\$2/$sysroot_mount_unit" << EOF
	[Unit]
	Before=initrd-root-fs.target
	After=systemd-repart.service
	After=\$systemd_dev_dependency
	Requires=\$systemd_dev_dependency
	[Mount]
	What=\$dev_path
	Where=$sysroot_target
	Options=$options
	EOF

	if ! [ -L "\$2/initrd-root-fs.target.requires/$sysroot_mount_unit" ]; then
		[ -d "\$2/initrd-root-fs.target.requires" ] || mkdir -p "\$2/initrd-root-fs.target.requires"
		ln -s "../$sysroot_mount_unit" "\$2/initrd-root-fs.target.requires/$sysroot_mount_unit"
	fi
	EOF_GENERATOR
	chmod +x "$target/etc/systemd/system-generators/repart-$repart"
elif [ "$cryptsetup" = 1 ]; then
	mkdir -p "$target/etc/systemd/system-generators"
	cat > "$target/etc/systemd/system-generators/repart-$repart" <<-EOF_GENERATOR
	#!/bin/bash
	set -ex

	mkdir -p "/etc/repart.uuid"
	[ -f "/etc/repart.uuid/$repart_uuid" ] || cat /proc/sys/kernel/random/uuid > "/etc/repart.uuid/$repart_uuid"
	uuid="\$(cat "/etc/repart.uuid/$repart_uuid")"

	cat > "/etc/repart.d/1.$repart.conf" << EOF
	[Partition]
	UUID=\$uuid
	Type=$repart_type
	Weight=$weight
	FactoryReset=true
	EOF

	dev_path="/dev/disk/by-partuuid/\$uuid"
	systemd_dev_dependency="blockdev-settle@\$(systemd-escape \${dev_path#/}).service"
	cat > "\$2/cryptsetup-$sysroot_target_escaped.service" << EOF
	[Unit]
	After=systemd-repart.service
	After=\$systemd_dev_dependency
	Requires=\$systemd_dev_dependency
	[Service]
	Type=oneshot
	RemainAfterExit=yes
	ExecStart=/usr/bin/make_ephemeral_cryptsetup "/etc/repart.templates/$repart_uuid" "$sysroot_target_escaped" "\$dev_path"
	EOF

	systemd_mapper_dev_dropin="\$2/$(systemd-escape "dev/mapper/$sysroot_target_escaped").device.d"
	mkdir -p "\$systemd_mapper_dev_dropin"
	cat > "\$systemd_mapper_dev_dropin/override.conf" << EOF
	[Unit]
	JobRunningTimeoutSec=infinity
	EOF

	cat > "\$2/$sysroot_mount_unit" << EOF
	[Unit]
	Before=initrd-root-fs.target
	After=cryptsetup-$sysroot_target_escaped.service
	Requires=cryptsetup-$sysroot_target_escaped.service
	[Mount]
	What=/dev/mapper/$sysroot_target_escaped
	Where=$sysroot_target
	Options=$options
	EOF

	if ! [ -L "\$2/initrd-root-fs.target.requires/$sysroot_mount_unit" ]; then
		[ -d "\$2/initrd-root-fs.target.requires" ] || mkdir -p "\$2/initrd-root-fs.target.requires"
		ln -s "../$sysroot_mount_unit" "\$2/initrd-root-fs.target.requires/$sysroot_mount_unit"
	fi
	EOF_GENERATOR
	chmod +x "$target/etc/systemd/system-generators/repart-$repart"
else
	cat > "$target/etc/repart.d/1.$repart.conf" <<-EOF
	[Partition]
	UUID=$repart_uuid
	Type=$repart_type
	Weight=$weight
	Format=$fs
	CopyFiles=/etc/repart.templates/$repart_uuid:/
	EOF

	dev_path="/dev/disk/by-partuuid/$repart_uuid"
	systemd_dev_dependency="blockdev-settle@$(systemd-escape ${dev_path#/}).service"
	mkdir -p "$target/etc/systemd/system/"
	cat > "$target/etc/systemd/system/$sysroot_mount_unit" <<-EOF
	[Unit]
	Before=initrd-root-fs.target
	After=systemd-repart.service
	After=$systemd_dev_dependency
	Requires=$systemd_dev_dependency
	[Mount]
	What=$dev_path
	Where=$sysroot_target
	Options=$options
	EOF

	if ! [ -L "$target/etc/systemd/system/initrd-root-fs.target.requires/$sysroot_mount_unit" ]; then
		[ -d "$target/etc/systemd/system/initrd-root-fs.target.requires" ] || mkdir -p "$target/etc/systemd/system/initrd-root-fs.target.requires"
		ln -s "../$sysroot_mount_unit" "$target/etc/systemd/system/initrd-root-fs.target.requires/$sysroot_mount_unit"
	fi
fi
