#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import json
import time

class Ec2ImageBuild:

    def __init__(self, bucket, region, raw_image, image_name, permission=False, distribute=False):
        self.bucket = bucket
        self.region = region
        self.permission = permission
        self.distribute = distribute
        self.raw_image = raw_image
        self.image_name = image_name

    def upload_image(self, region, bucket, image_raw, image_name):
        result = subprocess.run(["aws", "--region", region, "s3", "cp", "--no-progress", image_raw, "s3://" + bucket + "/" + image_name], capture_output=True)

        if result.returncode != 0:
            sys.exit("Unable to upload image " + image_raw + ": " + str(result.stdout) + " " + str(result.stderr))
        print(result.stdout)

    def import_snapshot(self, region, bucket, image_name):

        container_string = ("Description=garden-linux,Format=raw,UserBucket={S3Bucket=%s,S3Key=%s}" % (bucket, image_name))
        result = subprocess.run(["aws", "--region", region, "ec2", "import-snapshot", "--disk-container", container_string], capture_output= True)
        if result.returncode != 0:
            sys.exit("Unable to create snapshot for " + image_name)

        doc = json.loads(result.stdout)
        task_id = doc["ImportTaskId"]
        status = doc["SnapshotTaskDetail"]["Status"]
        print("Creating Snapshot for %s, id: %s, status: %s" % (image_name, task_id, status))
        time.sleep(60)

        i = 0
        while i < 80 and status == "active":
            i += 1
            time.sleep(10)
            result = subprocess.run(["aws", "--region", region, "ec2", "describe-import-snapshot-tasks", "--import-task-ids", task_id], capture_output=True)
            if result.returncode != 0:
                sys.exit("Unable to create snapshot for %s: %s %s" % image_name, result.stdout, result.stderr)
            doc = json.loads(result.stdout)
            status = doc["ImportSnapshotTasks"][0]["SnapshotTaskDetail"]["Status"]
            if "SnapshotId" in doc["ImportSnapshotTasks"][0]["SnapshotTaskDetail"]:
                snapshot_id = doc["ImportSnapshotTasks"][0]["SnapshotTaskDetail"]["SnapshotId"]
        print("Snapshot id %s" % snapshot_id)
        return snapshot_id

    def register_image(self, region, snapshot_id, image_name):
        print("Registering image for snapshot " + snapshot_id)
        result = subprocess.run(["aws", "--region", region, "ec2", "register-image",
            "--name", image_name,
            "--description", "Garden Linux Testing",
            "--architecture", "x86_64",
            "--root-device-name", "/dev/xvda",
            "--virtualization-type", "hvm",
            "--ena-support",
            "--architecture", "x86_64",
            "--block-device-mapping", "DeviceName=/dev/xvda,Ebs={DeleteOnTermination=True,SnapshotId=%s,VolumeType=gp2}" % snapshot_id],
            capture_output=True)
        print(result)
        print(result.stdout)
        if result.returncode != 0:
            sys.exit("Unable to register image for snapshot " + snapshot_id + ": " + str(result.stdout) + " " + str(result.stderr))
        doc = json.loads(result.stdout)
        return doc["ImageId"]

    def make_amis_public(self, amis):
        if self.permission == False:
            return

        for region, ami in amis.items():
            print("Making ami {} in region {} public.".format(ami, region))
            result = subprocess.run(["aws", "--region", region, "ec2", "modify-image-attribute",
                "--image-id", ami,
                "--launch-permission", "Add=[{Group=all}]"],
                capture_output=True)
            print(result)
            print(result.stdout)
            if result.returncode != 0:
                sys.exit("Unable to make ami public: " + ami + " in region: " + region + ". " + str(result.stdout) + " " + str(result.stderr))

    def distribute_ami(self, src_ami, image_name):
        src_region = self.region
        amis = {src_region: src_ami}
        if self.distribute == False:
            return amis

        regions_raw = json.loads(subprocess.run(['aws', 'ec2', 'describe-regions'], encoding='utf-8', stdout=subprocess.PIPE).stdout)['Regions']
        for dst_region in list(map(lambda x: x['RegionName'], regions_raw)):
            if dst_region != src_region:
                result = subprocess.run(
                    ["aws", "ec2", "copy-image", "--source-image-id", src_ami, "--source-region", src_region, "--region", dst_region, "--name", image_name ],
                    capture_output=True)
                if result.returncode != 0:
                    sys.exit("Unable to copy ami: " + src_ami + " to region: " + dst_region + ": " + str(result.stdout) + " " + str(result.stderr))
                dst_ami = json.loads(result.stdout)["ImageId"]
                amis[dst_region] = dst_ami
        return amis

    def run(self):
        self.upload_image(self.region, self.bucket, self.raw_image, self.image_name)
        snapshot_id = self.import_snapshot(self.region, self.bucket, self.image_name)
        ami_id = self.register_image(self.region, snapshot_id, self.image_name)
        print("Got ami_id: " + ami_id)
        amis = self.distribute_ami(ami_id, self.image_name)
        self.make_amis_public(amis)

    @classmethod
    def _argparse_register(cls, parser):

        parser.add_argument(
            '--bucket',
            type=str,
            dest='bucket',
            help='Upload bucket',
            required=True
        )
        parser.add_argument(
            '--permission-public',
            type=bool,
            default=False,
            help='Make snapshot and image public',
        )
        parser.add_argument(
            '--distribute',
            type=bool,
            default=False,
            help="Copy the image across AWS regions",
        )
        parser.add_argument(
            '--region',
            type=str,
            help="AWS region",
            required=True
        )
        parser.add_argument(
            '--image-name',
            type=str,
            dest='image_name',
            help='Name of image in bucket and snapshot',
            required=True
        )
        parser.add_argument(
            'raw_image',
            type=str,
            help="RAW image file"
        )

    @classmethod
    def _main(cls):
        parser = argparse.ArgumentParser()
        cls._argparse_register(parser)
        args = parser.parse_args()

        ec2_img_build = cls(region=args.region, bucket=args.bucket, raw_image=args.raw_image, image_name=args.image_name, permission=args.permission_public, distribute=args.distribute)
        ec2_img_build.run()

if __name__ == '__main__':
    Ec2ImageBuild._main()
