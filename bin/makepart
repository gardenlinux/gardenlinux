#!/usr/bin/env bash

set -Eeuo pipefail

# redirect all output to stderr so only second pass output for makedisk gets written to stdout
exec 3>&1
exec 1>&2

thisDir="$(dirname "$(readlink -f "$BASH_SOURCE")")"
rootfs="$1"
arch="${2:-$arch}"
timestamp=$(garden-version --epoch "$version")

rootfs_work=$(mktemp -d)
cp -a "$rootfs/." "$rootfs_work"
mkdir -p "$rootfs_work/overlay"/{etc,var}/{upper,work}

find "$rootfs_work/var/log/" -type f -delete

# SELinux 'default' policy file contexts
chcon -R system_u:object_r:unlabeled_t:s0 "$rootfs_work"
"$thisDir/garden-chroot" "$rootfs_work" /sbin/setfiles /etc/selinux/default/contexts/files/file_contexts /
rm "$rootfs_work/.autorelabel"

fstab="$(mktemp)"
veritytab="$(mktemp)"
root_hash="$(mktemp)"

partitions="$(mktemp)"
overlay_partitions="$(mktemp)"
secureboot_partitions="$(mktemp)"
efi_partition="$(mktemp)"

# strip comments and blank lines and sort by path depth (deepest first)
sed 's/#.*//;/^[[:blank:]]*$/d' \
| while IFS= read -r line; do
	# get fstab entry target path depth
	depth=$(echo "$line" | awk '{ print $2 }' | sed 's#^/\+##;s#/\+$##' | awk -F '/' '{ print NF }')
	echo "$depth" "$line"
  done \
| sort -k 1 -n -r \
| while read -r depth source target fs options args; do
	# parse extra fstab arguments to determine partition attributes
	type=$([[ "$fs" = "swap" ]] && echo "swap" || echo "linux")
	# consider switching this to args
	[[ "$target" = "/" && "$arch" = "amd64" ]] && type="4f68bce3-e8cd-4db1-96e7-fbcaf984b709"
	[[ "$target" = "/" && "$arch" = "arm64" ]] && type="b921b045-1df0-41c3-af44-4c6f280d3fae"
	size=
	resize=1
	verity=0
	secureboot=0
	syslinux=$([[ "$(cut -c -5 <<< "$target")" = "/boot" ]] && [[ -f "$rootfs/usr/bin/syslinux" ]] && echo 1 || echo 0)
	while IFS="=" read -r key value; do
		case "$key" in
			"type")
				type="$value"
				;;
			"size")
				size="$value"
				resize=0
				;;
			"verity")
				verity=1
				;;
			"secureboot")
				secureboot=1
				;;
			"syslinux")
				syslinux=1
				;;
		esac
	done < <(echo "$args" | tr "," "\n")

	# check if fstab entry specifies source by UUID or LABEL
	uuid="$(grep -oP '(?<=^UUID=)[a-fA-F0-9\-]*$' <<< "$source" || true)"
	label="$(grep -oP '(?<=^LABEL=)[a-zA-Z0-9\_\-]*$' <<< "$source" || true)"

	# compute sufficiently padded size for partition (aligned to nearest MB (2048 sectors))
	size=${size:-$(du -sb "$rootfs_work$target" | awk '{ min_size_bytes = min_size * MB; size = $1 * 1.5; padded_size = size + (MB - (size % MB) % MB); if (padded_size < min_size_bytes) padded_size = min_size_bytes; print (padded_size / MB) "MiB" }' "MB=1048576" "min_size=64")}

	file="$(mktemp)"
	truncate -s "$size" "$file"

	if [[ "$depth" = 0 ]]; then
		# we iterate depth sorted, so all other partitions should already have been processed and written to fstab
		if [[ "$verity" = 0 ]]; then
			options="$options,x-systemd.growfs"
			echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
			rm -rf "$rootfs_work/overlay"
		else
			echo "overlay /var overlay defaults,lowerdir=/sysroot/var,upperdir=/sysroot/overlay/var/upper,workdir=/sysroot/overlay/var/work,x-systemd.requires-mounts-for=/sysroot/overlay,x-initrd.mount 0 2" >> "$fstab"
			echo "overlay /etc overlay defaults,lowerdir=/sysroot/etc,upperdir=/sysroot/overlay/etc/upper,workdir=/sysroot/overlay/etc/work,x-systemd.requires-mounts-for=/sysroot/overlay,x-initrd.mount 0 2" >> "$fstab"
		fi
		column -t "$fstab" > "$rootfs_work/etc/fstab"
		column -t "$veritytab" >> "$rootfs_work/etc/veritytab"
	fi

	case "$fs" in
		"ext4")
			make_reproducible_ext4 -t "$timestamp" -h "gardenlinux:$version:partition:$target" ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} -q $([ "$resize" = 0 ] || echo "-m") -p 16 "$rootfs_work$target" "$file"
			;;
		"vfat")
			make_reproducible_vfat -t "$timestamp" -h "gardenlinux:$version:partition:$target" ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} "$rootfs_work$target" "$file"
			echo $file > $efi_partition
			;;
		"swap")
			make_reproducible_swap ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} "$file"
			;;
		*)
			echo "filesystem type $fs not yet supported"
			exit 1
			;;
	esac

	# for real mount points (i.e. not swap) clear target directory after contents written to partition to avoid rewriting contents to parent mount point partition
	if [[ "$(cut -c 1 <<< "$target")" = "/" ]]; then
		find "$rootfs_work$target" -depth -mindepth 1 -delete
	fi

	# recalc size, since it might have change (e.g. from resize2fs)
	size=$(du -b "$file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")

	echo "$target $(sha256sum "$file")"

	# set dump and pass options for output fstab to defaults
	dump=0
	pass=$( ([[ "$(cut -c 1 <<< "$target")" != "/" ]] && echo 0) || ([[ "$target" = "/" ]] && echo 1) || echo 2)

	if [[ "$verity" = 1 ]]; then
		verity_uuid=$(echo "gardenlinux:$version:verity_uuid:$fs:$target" | uuid_hash)
		verity_salt=$(echo "gardenlinux:$version:verity_salt:$fs:$target" | sha256sum | cut -c -64)
		hash_file=$([[ "$depth" = 0 ]] && echo "$root_hash" || mktemp)
		verity_file="$file.verity"
		veritysetup format --uuid "$verity_uuid" --salt "$verity_salt" --data-block-size=4096 --hash-block-size=4096 --root-hash-file "$hash_file" "$file" "$verity_file"
		verity_size=$(du -b "$verity_file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' 'MB=1048576')
		hash=$(cat "$hash_file")
		part_uuid="${hash:0:8}-${hash:8:4}-${hash:12:4}-${hash:16:4}-${hash:20:12}"
		verity_part_uuid="${hash:32:8}-${hash:40:4}-${hash:44:4}-${hash:48:4}-${hash:52:12}"
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$partitions"
		echo -e "$verity_part_uuid\tlinux\t$verity_size\t0\t$verity_file" >> "$partitions"

		if [[ "$depth" != 0 ]]; then
			verity_name="verity$(sed 's|/|_|' <<< "$target")"
			echo "$verity_name" "$source" "UUID=$verity_uuid" "$hash" >> "$veritytab"
			echo "/dev/mapper/$verity_name" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
		fi
	else
		part_uuid=$(echo "gardenlinux:$version:part_uuid:$source" | uuid_hash)
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$([[ "$(cut -c -8 <<< "$target")" = "/overlay" ]] && echo "$overlay_partitions" || echo $partitions)"
		echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
	fi

	if [[ "$secureboot" = 1 ]]; then
		echo "$file" >> "$secureboot_partitions"
	fi
  done

rmdir "$rootfs_work"

read -r _ cmdline < "$rootfs/etc/kernel/cmdline" # hacky assumption that root= is always at start of kernel cmdline. TODO: find better way to handle this
if [[ -z "$(cat "$root_hash")" ]]; then
	root_source=$(tail -n 1 "$fstab" | cut -d " " -f 1)
	cmdline="root=$root_source $cmdline"

	# enable verity if the root partition is writable, but any other partition has verity enabled, most likely /usr
	if [ ! -s "$secureboot_partitions" ]; then
		if [[ ! -z "$(cat "$veritytab")" ]]; then
			makesecureboot -r "$rootfs" -c "$cmdline" -v "$veritytab" -t "$timestamp" -s "false" < "$efi_partition"
		else
			makesecureboot -r "$rootfs" -c "$cmdline" -t "$timestamp" -s "false" < "$efi_partition"
		fi
	fi
else
	cmdline="roothash=$(cat "$root_hash") root=/dev/mapper/root $cmdline"

	if [ ! -s "$secureboot_partitions" ]; then
		makesecureboot -r "$rootfs" -c "$cmdline" -v "$veritytab" -t "$timestamp" -s "false" < "$efi_partition"
	fi
fi

if [ -s "$secureboot_partitions" ]; then
	makesecureboot -r "$rootfs" -c "$cmdline" -v "$veritytab" -t "$timestamp" < "$secureboot_partitions"
fi

cat "$partitions" "$overlay_partitions" >&3

# cleanup
rm "$fstab" "$veritytab" "$root_hash" "$partitions" "$overlay_partitions" "$secureboot_partitions"
