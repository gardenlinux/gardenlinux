#!/usr/bin/env bash

set -Eeuo pipefail

# redirect all output to stderr so only second pass output for makedisk gets written to stdout
exec 3>&1
exec 1>&2

function uuid_hash {
	hash=$(sha256sum)
	echo "${hash:0:8}-${hash:8:4}-${hash:12:4}-${hash:16:4}-${hash:20:12}"
}

rootfs="$1"
arch="${2:-$arch}"
timestamp=$(garden-version --epoch "$version")

rootfs_work=$(mktemp -d)
cp -a "$rootfs/." "$rootfs_work"
mkdir -p "$rootfs_work/overlay"/{etc,var}/{upper,work}

find "$rootfs_work/var/log/" -type f -delete

chcon -R system_u:object_r:unlabeled_t:s0 "$rootfs_work"
chroot "$rootfs_work" /usr/bin/env -i /sbin/setfiles /etc/selinux/default/contexts/files/file_contexts /
rm "$rootfs_work/.autorelabel"

uefi_partition=$(mktemp)
fstab=$(mktemp)
veritytab=$(mktemp)
root_hash=$(mktemp)

export E2FSPROGS_FAKE_TIME=$timestamp

# strip comments and blank lines and sort by path depth (deepest first)
sed 's/#.*//;/^[[:blank:]]*$/d' \
| while IFS= read -r line; do
	# get fstab entry target path depth
	depth=$(echo "$line" | awk '{ print $2 }' | sed 's#^/\+##;s#/\+$##' | awk -F '/' '{ print NF }')
	echo "$depth" "$line"
  done \
| sort -k 1 -n -r \
| while read -r depth source target fs options args; do
	# parse extra fstab arguments to determine partition attributes
	type=$([[ "$fs" = "swap" ]] && echo "swap" || echo "linux")
	# consider switching this to args
	[[ "$target" = "/" && "$arch" = "amd64" ]] && type="4f68bce3-e8cd-4db1-96e7-fbcaf984b709"
	[[ "$target" = "/" && "$arch" = "arm64" ]] && type="b921b045-1df0-41c3-af44-4c6f280d3fae"
	size=
	resize=1
	verity=0
	syslinux=$([[ "$(cut -c -5 <<< "$target")" = "/boot" ]] && [[ -f "$rootfs/usr/bin/syslinux" ]] && echo 1 || echo 0)
	while IFS="=" read -r key value; do
		case "$key" in
			"type")
				type="$value"
				;;
			"size")
				size="$value"
				resize=0
				;;
			"verity")
				verity=1
				;;
			"syslinux")
				syslinux=1
				;;
		esac
	done < <(echo "$args" | tr "," "\n")

	# check if fstab entry specifies source by UUID or LABEL
	uuid=$(grep -oP '(?<=^UUID=)[a-fA-F0-9\-]*$' <<< "$source" || true)
	label=$(grep -oP '(?<=^LABEL=)[a-zA-Z0-9\_\-]*$' <<< "$source" || true)

	# compute sufficiently padded size for partition (aligned to nearest MB (2048 sectors))
	size=${size:-$(du -sb "$rootfs_work$target" | awk '{ min_size = 64 * MB; size = $1 * 1.5; padded_size = size + (MB - (size % MB) % MB); if (padded_size < min_size) padded_size = min_size; print (padded_size / MB) "MiB" }' 'MB=1048576')}

	file=$([[ "$type" = "uefi" ]] && echo "$uefi_partition" || mktemp)
	truncate -s "$size" "$file"

	if [[ "$depth" = 0 ]]; then
		# we iterate depth sorted, so all other partitions should already have been processed and written to fstab
		if [[ "$verity" = 0 ]]; then
			options="$options,x-systemd.growfs"
			echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
			rm -rf "$rootfs_work/overlay"
		else
			echo "overlay /var overlay defaults,lowerdir=/var,upperdir=/overlay/var/upper,workdir=/overlay/var/work,x-systemd.requires-mounts-for=/overlay 0 2" >> "$fstab"
			echo "overlay /etc overlay defaults,lowerdir=/etc,upperdir=/overlay/etc/upper,workdir=/overlay/etc/work,x-systemd.requires-mounts-for=/overlay 0 2" >> "$fstab"
		fi
		column -t "$fstab" > "$rootfs_work/etc/fstab"
		column -t "$veritytab" >> "$rootfs_work/etc/veritytab"
	fi

	case "$fs" in
		"ext4")
			# set uuid and HTREE hash_seed to reproducible values instead of default random generated ones
			uuid=${uuid:-$(echo "gardenlinux:$version:fs_uuid:$fs:$target" | uuid_hash)}
			hash_seed=$(echo "gardenlinux:$version:ext4_hash_seed:$fs:$target" | uuid_hash)
			mke2fs -t ext4 -b 4096 -E hash_seed="$hash_seed" -U "$uuid" ${label:+"-L"} ${label:+"$label"} -I 256 -d "$rootfs_work$target" "$file"

			# set quota options and resize to minimum size needed for contents (when run on a file resize2fs automatically truncates)
			tune2fs -Q usrquota,grpquota,prjquota "$file"

			if [[ "$resize" = 1 ]]; then
				resize2fs -M "$file"

				if [[ "$depth" = 0 ]]; then
					# add small size overhead/buffer to root partition
					size=$(du -b "$file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) + 16 "MiB" }' 'MB=1048576')
					truncate -s "$size" "$file"
					resize2fs "$file"
				fi
			fi

			# fixup timestamp on all used inodes to create reproducible ext4 image
			num_inodes=$(dumpe2fs -h "$file" 2> /dev/null | grep '^Inode count:' | cut -d ':' -f 2 | tr -d ' ')
			used_inodes=$(for (( inode=1; inode <= "$num_inodes"; inode++ )); do echo "testi <$inode>"; done | debugfs "$file" 2> /dev/null | grep -oP '(?<=Inode )[0-9]+(?= is marked in use)')
			for inode in $used_inodes; do for field in {a,m,c}time; do echo "set_inode_field <$inode> $field $timestamp"; done; done | debugfs -w "$file" &> /dev/null

			if [[ -d "$rootfs_work/boot/efi" ]]; then
				chcon system_u:object_r:dosfs_t:s0 "$rootfs_work/boot/efi"
			fi

			rm -rf "$rootfs_work$target"
			mkdir "$rootfs_work$target"

			if [[ "$target" = "/overlay" ]]; then
				chcon system_u:object_r:default_t:s0 "$rootfs_work/overlay"
			fi
			;;
		"vfat")
			uuid=${uuid:-$(echo "gardenlinux:$version:fs_uuid:$fs:$target" | sha256sum | cut -c -8)}
			datefudge -s "@$timestamp" mformat -i "$file" -F -N "$uuid" ${label:+"-v"} ${label:+"$label"} ::
			pushd "$rootfs_work$target"
				datefudge -s "@$timestamp" mcopy -i "$file" -s -p $(ls -A) ::
			popd
			rm -rf "$rootfs_work$target"
			mkdir "$rootfs_work$target"
			;;
		"swap")
			uuid=${uuid:-$(echo "gardenlinux:$version:fs_uuid:$fs:$target" | uuid_hash)}
			mkswap -U "$uuid" ${label:+"-L"} ${label:+"$label"} "$file"
			;;
		*)
			echo "filesystem type $fs not yet supported"
			exit 1
			;;
	esac

	# install syslinux if extra argument given in fstab
	if [[ "$syslinux" = 1 ]]; then
		PATH="$PATH:$rootfs/usr/bin" datefudge -s "@$timestamp" syslinux -d syslinux -i "$file"
	fi

	# recalc size, since it might have change (e.g. from resize2fs)
	size=$(du -b "$file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' 'MB=1048576')

	echo "$target $(sha256sum "$file")"

	# set dump and pass options for output fstab to defaults
	dump=0
	pass=$( ([[ "$(cut -c 1 <<< "$target")" != "/" ]] && echo 0) || ([[ "$target" = "/" ]] && echo 1) || echo 2)

	if [[ "$verity" = 1 ]]; then
		verity_uuid=$(echo "gardenlinux:$version:verity_uuid:$fs:$target" | uuid_hash)
		verity_salt=$(echo "gardenlinux:$version:verity_salt:$fs:$target" | sha256sum | cut -c -64)
		hash_file=$([[ "$depth" = 0 ]] && echo "$root_hash" || mktemp)
		verity_file="$file.verity"
		veritysetup format --uuid "$verity_uuid" --salt "$verity_salt" --data-block-size=4096 --hash-block-size=4096 --root-hash-file "$hash_file" "$file" "$verity_file"
		verity_size=$(du -b "$verity_file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' 'MB=1048576')
		hash=$(cat "$hash_file")
		part_uuid="${hash:0:8}-${hash:8:4}-${hash:12:4}-${hash:16:4}-${hash:20:12}"
		verity_part_uuid="${hash:32:8}-${hash:40:4}-${hash:44:4}-${hash:48:4}-${hash:52:12}"
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >&3
		echo -e "$verity_part_uuid\tlinux\t$verity_size\t0\t$verity_file" >&3

		if [[ "$depth" != 0 ]]; then
			verity_name="verity$(sed 's|/|_|' <<< "$target")"
			echo "$verity_name" "UUID=$uuid" "UUID=$verity_uuid" "$hash" >> "$veritytab"
			echo "/dev/mapper/$verity_name" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
		fi
	else
		part_uuid=$(echo "gardenlinux:$version:part_uuid:$source" | uuid_hash)
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >&3
		echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
	fi
  done

read -r _ cmdline < "$rootfs/etc/kernel/cmdline"
if [[ -z "$(cat "$root_hash")" ]]; then
	root_source=$(tail -n 1 "$fstab" | cut -d " " -f 1)
	cmdline="root=$root_source $cmdline"
else
	cmdline="roothash=$(cat "$root_hash") root=/dev/mapper/root $cmdline"
fi

initrd="$(mktemp)"
unified_image="$(mktemp)"
unified_image_signed="$(mktemp)"

[[ ! -e "$rootfs$initrd" ]]
touch "$rootfs$initrd"
mount --bind "$initrd" "$rootfs$initrd"
touch "$rootfs/etc/veritytab"
mount --bind "$veritytab" "$rootfs/etc/veritytab"
[[ -d "$rootfs/proc" ]] && [[ -z "$(ls -A "$rootfs/proc")" ]]
mount -t proc none "$rootfs/proc"

kernel_file=$(find "$rootfs/boot/" -name 'vmlinuz-*')
kernel_version="${kernel_file#*-}"

chroot "$rootfs" dracut \
	--force \
	--kver "$kernel_version" \
	--modules "bash dash systemd systemd-initrd systemd-repart systemd-veritysetup kernel-modules kernel-modules-extra terminfo udev-rules dracut-systemd base fs-lib shutdown" \
	--install "/etc/veritytab" \
	--reproducible \
	"$initrd"

umount "$rootfs/proc"
umount "$rootfs$initrd"
rm "$rootfs$initrd"
umount "$rootfs/etc/veritytab"
rm "$rootfs/etc/veritytab"

case "$arch" in
	amd64)
		uefi_arch=X64
		gnu_arch=x86_64
		initrd_vma=0x3000000
		;;
	arm64)
		uefi_arch=AA64
		gnu_arch=aarch64
		initrd_vma=0x4000000
		;;
esac

# create unified image
cmdline_file=$(mktemp)
echo "$cmdline" > "$cmdline_file"
"${gnu_arch}-linux-gnu-objcopy" \
	--add-section .cmdline="$cmdline_file" --change-section-vma .cmdline=0x1000000 \
	--add-section .linux="$kernel_file" --change-section-vma .linux=0x2000000 \
	--add-section .initrd="$initrd" --change-section-vma .initrd="$initrd_vma" \
	"$rootfs/usr/lib/systemd/boot/efi/linux$(tr '[:upper:]' '[:lower:]' <<< "$uefi_arch").efi.stub" "$unified_image"
rm "$cmdline_file"

# sign unified image
datefudge -s "@$timestamp" sbsign --cert /cert/secureboot.db.sign.crt --key /cert/secureboot.db.sign.key --output "$unified_image_signed" "$unified_image"

# copy unified image to uefi partition
datefudge -s "@$timestamp" mcopy -i "$uefi_partition" -o -p "$unified_image_signed" "::/EFI/BOOT/BOOT$uefi_arch.EFI"

if [[ -f "$rootfs/usr/bin/syslinux" ]]; then
	syslinux_conf="$(mktemp)"
	mcopy -i "$uefi_partition" "::/syslinux/syslinux.cfg" "$syslinux_conf"
	sed -i 's|APPEND.*|APPEND '"$cmdline"'|' "$syslinux_conf"
	datefudge -s "@$timestamp" mcopy -i "$uefi_partition" -o -p "$syslinux_conf" "::/syslinux/syslinux.cfg"
	datefudge -s "@$timestamp" mcopy -i "$uefi_partition" -o -p "$initrd" "::/legacy/$kernel_version/initrd.img-$kernel_version"
	rm "$syslinux_conf"
fi

# cleanup
rm -rf "$rootfs_work" "$fstab" "$veritytab" "$root_hash" "$initrd" "$unified_image" "$unified_image_signed"
