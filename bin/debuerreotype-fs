#!/usr/bin/env bash
set -Eeuo pipefail

thisDir="$(dirname "$(readlink -f "$BASH_SOURCE")")"
source "$thisDir/.constants.sh" \
	--flags 'boot:,image:,rootfs:,rootsize:,disklabel:' \
	-- \
	'[--boot=bios,uefi] [--image=raw,vmdk,qcow2] [--disklabel=gpt|mbr|none] [--rootfs=ext4] [--rootsize=min|2G|xG] <rootfs-folder>' \
	'--bios=bios,uefi --image=raw --rootsize=min rootfs
--bios=none --image=pxe --rootfs=sqashfs rootfs'

eval "$dgetopt"
boot=( bios uefi )
image=( raw )
disklabel=gpt
roottype=ext4
rootsize=min
while true; do
	flag="$1"; shift
	dgetopt-case "$flag"
	case "$flag" in
		--boot)  IFS=',' read -ra boot <<< "$1"; shift ;;
		--image) IFS=',' read -ra image <<< "$1"; shift ;;
		--disklabel)   disklabel=$1; shift ;;
		--rootfs)   roottype=$1; shift ;;
		--rootsize) rootsize=$1; shift ;;
		--) break ;;
		*) eusage "unknown flag '$flag'" ;;
	esac
done

rootfs="${1:-}";     shift || eusage 'missing rootfs'
#rootfs_size=$(du -x $rootfs)

tar2ext () {
	size="500M"
	fs_type="ext4"
	shrink=true
	output=
	while [ $# -gt 0 ]; do
		flag=$1; shift
		case "$flag" in
			-t)	fs_type="$1";	shift ;;
			--size)	
				size="$1";	shift ;;
			--no-shrink)
				shrink=false	;;
			*)	if [ -z "${output}" ]; then 	output="$flag"
				else 				break
				fi ;;
		esac
	done
	[ -z "${output}" ]	&& ( echo "tar2ext missing output"; exit 1; ) || true
	
	# copy all data on the ext2/3/4 file
	dd of=rootfs.${fs_type} bs=1 count=0 seek=${size}
	mkfs.${fs_type} -L ROOT -E lazy_itable_init=0,lazy_journal_init=0,discard ${output}
	tmpdir=$(mktemp -d)
	mount -o loop rootfs.${fs_type} $tmpdir
	tar x --xattrs-include='*.*' -C $tmpdir
	umount $tmpdir
	rm -rf $tmpdir
	sync
	# make sure you we did not destroy anything
	fsck.${fs_type} -f -a -E discard,inode_count_fullmap ${output}
		
	# shrink it to the max
	if ${shrink}; then
		# what is the maximum reduction
		resizereport=
		while [ -z "$(echo $resizereport | grep "Nothing to do")" ]; do
       			resizereport="$(resize2fs -M ${output} 2>&1 | grep "^The filesystem")"
  	     		echo "$resizereport"
		done
	fi
}

# generating root file system
case "$roottype" in
	ext4)
		#(( ${size}*13/10 ))
		xzcat rootfs.tar.xz | tar2ext rootfs.part
		;;
	squashfs | sqfs)
		xzcat rootfs.tar.xz | tar2sqfs -c xz rootfs.part
		;;
	docker) 
		cat > Dockerfile <<-EOF
			FROM scratch
			ADD rootfs.tar /
		EOF
		executor --dockerfile Dockerfile --context dir:///tmp/output --tarPath rootfs.docker.tar --no-push --destination=image --verbosity=debug
		;;
	*)
		eusage "unknown rootfs '$roottype'"
		;;
esac

# calculating space needed
if [[ " ${boot[@]} " =~ " bios " ]]; then
fi
if [[ " ${boot[@]} " =~ " uefi " ]]; then
fi


# generating disk
case "$disklabel" in
	gpt)
		;;
	mbr)
		;;
	none)
		;;
	*)
		eusage "unkown disklabel $disklabel. Only gpt, mbr or none (for no diskimage) are supported."
		;;
esac

# generationg partions
if [[ " ${boot[@]} " =~ " bios " ]]; then
fi
if [[ " ${boot[@]} " =~ " uefi " ]]; then
fi

# moving root in

# making bootable
if [[ " ${boot[@]} " =~ " bios " ]]; then
fi
if [[ " ${boot[@]} " =~ " uefi " ]]; then
fi

# converting to target format
case "$image" in
	raw)	;;
	vhd)	;;
	qcow2)	;;
	*)
		eusage "unknown imagetype $image"

echo "boot ${boot[@]}"
echo "image ${image[@]}"
echo "rootfs $roottype"
echo "rootsize $rootsize"
echo "rootfolder $rootfs"
#		loopback=$(losetup -f --show rootfs.ext4)
#		trap "losetup -d $loopback 2>&1 /dev/null" EXIT
