#!/usr/bin/env bash

# Contains sources from https://github.com/debuerreotype/debuerreotype

set -Eeuo pipefail

thisDir="$(dirname "$(readlink -f "${BASH_SOURCE}")")"
versionfile="$(readlink -f "${thisDir}/../VERSION")"
startdate="Mar 31 00:00:00 UTC 2020"

source "${thisDir}/.constants.sh" \
	--flags 'major,minor,date,datefull,epoch,git' \
	--usage '[ --major | --minor | --date | --datefull | --epoch | --git ] [<garden-version>|<timestamp>]' \
	--sample '20200427' \
	--sample '--date 27.1' \
	--help   "Generates version dependent values according to the file $versionfile or to the parameter handed over. Versions can be converted adequately

--major 	prints only the major version
--minor		prints only the minor version
--date 		prints the date according to the version e.g. 20200427 if garden-version=27
--datefull	prints a full date deteministically usable by debootstrap
--epoch		prints the seconds sinc 19700101 till garden-version
--git		prints the version plus the last git-hash

If no parameter is specified the full version <major>.<minor> e.g. 27.5 is printed. The version is taken from $versionfile. On HEAD this should always evaluate to 'today', on branch versions this always should resolve to the next version that will be build e.g. 27.1. This implies there is no branch with a .0 in the $versionfile file.
The version calculated expresses the days since $startdate. Calculation is always UTC based."

eval "${dgetopt}"
typeout="default"
while true; do
	flag="$1"; shift
	dgetopt-case "${flag}"
	case "${flag}" in
		--major|--minor|--date|--datefull|--epoch|--git)		
			typeout="${flag}"   ;;
		--)	break ;;
		*) 	eusage "unknown flag '${flag}'" ;;
	esac
done
input="${1:-$(sed -e "s/#.*\$//" -e "/^$/d" "${versionfile}")}";  shift || true
input=$(sed "s/^[[:space:]]*//;s/[[:space:]]*\$//" <<< ${input})

# no version / timestamp on versionfile
[ -z ${input} ] && input="today"

minor=0
if [[ ${input} =~ ^[0-9\.]*$ && $(cut -d. -f1 <<< ${input}) -lt 10000000 ]]; 
then	[ $(cut -d. -sf3 <<< ${input}) ] && eusage "invalid version format ${input}. should be <major>[.<minor>]"

	major="$(cut -d. -f1 <<< ${input})"
	if [ $(cut -d. -sf2 <<< ${input}) ]; then 
		minor="$(cut -d. -f2 <<< ${input})"
	fi
else	indate=$(date --date "${input}" +%s 2>/dev/null) || eusage "invalid date ${input}"
	major="$(( (${indate} - $(date --date "${startdate}" +%s)) / (60*60*24) ))"
fi

case "${typeout}" in
	--major)	echo ${major} ;;
	--minor)	echo ${minor} ;;
	--date)		date --date "${startdate} + ${major} days" +%Y%m%d ;;
	--datefull)	date --date "${startdate} + ${major} days" +%Y%m%dT%H%M%SZ ;;
	--epoch)	date --date "${startdate} + ${major} days" +%s ;;
	--git)		echo "${major}.${minor}-$(git -C "${scriptsDir}" rev-parse --short 'HEAD^{commit}')" ;;
        *)		echo "${major}.${minor}" ;;
esac

