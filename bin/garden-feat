#!/usr/bin/env python3

import os
import sys
import argparse
import yaml
import json
import textwrap

# Constants
MATRIX_TYPE_INCLUDE = 0
MATRIX_TYPE_EXCLUDE = 1
MATRIX_TYPE_IGNORE = 2
MATRIX_TYPE_START = 3
MATRIX_TYPE_DEP_CHAIN = 4

FEATURE_TYPE_PLATFORM = 'platform'
FEATURE_TYPE_ELEMENT = 'element'
FEATURE_TYPE_FLAG = 'flag'


def main():
    """ Validate and obtain Garden Linux features """
    args = get_args()

    feature_dir = args.featureDir
    start_features = args.features
    ignored_features = args.ignore

    # First, load all features available for
    # further processing. This makes it easier
    # to access feature information later on.
    all_features = get_all_features(feature_dir)

    # Sort start features by their type.
    # Platform > element > flag
    start_features = sort_feature_names_by_type(all_features, start_features)

    # Get a feature matrix of all included, excluded and ignored features.
    # In addition, create a dependency list of features.
    features_matrix  = get_feature_matrix(all_features, start_features, ignored_features)

    # Switch to defined action
    if args.type == 'cname':
        cname = get_cname(all_features, start_features, features_matrix[MATRIX_TYPE_DEP_CHAIN])
        print(cname)

    elif args.type == 'features':
        # Write out an ordered features list based on include priorities
        print(','.join(str(s) for s in features_matrix[MATRIX_TYPE_DEP_CHAIN]))

    elif args.type == 'platform':
        types = ['platform']
        features = get_feature_names_by_types(all_features,
            features_matrix[MATRIX_TYPE_DEP_CHAIN], types)
        print(','.join(str(s) for s in features))

    elif args.type == 'flags':
        types = ['flag']
        features = get_feature_names_by_types(all_features,
            features_matrix[MATRIX_TYPE_DEP_CHAIN], types)
        print(','.join(str(s) for s in features))

    elif args.type == 'elements':
        types = ['element', 'platform']
        features = get_feature_names_by_types(all_features,
            features_matrix[MATRIX_TYPE_DEP_CHAIN], types)
        print(','.join(str(s) for s in features))

    elif args.type == 'ignore':
        features = get_feature_names(
            features_matrix[MATRIX_TYPE_IGNORE].items())

        if len(features) == 0 or features[0] == '':
            print('garden-feat: warning: No feature is ignored.')
        else:
            print(','.join(str(s) for s in features))

    elif args.type == 'params':
        feature_params = get_feature_params(features_matrix)
        print(json.dumps(feature_params, indent=4, sort_keys=True))


def get_args():
    """ Get external cli args """

    # Reformat Argparse formatter_class
    class argparse_raw_formater(argparse.HelpFormatter):
        def _fill_text(self, text, width, indent):
            return "\n".join([textwrap.fill(line, width) for line in textwrap.indent(textwrap.dedent(text), indent).splitlines()])

    descripton = f'''
        garden-feat: Managing features for Garden Linux.

        positional arguments description:
          cname:                Effective minimum of features equivalent to specified features (ordered)
          features:             Effective maximum of all features (each feature used, no duplicates, ordered)
          platform:             Platforms in the featureset
          flags:                Flags in the featureset
          elements:             All elements of the featureset (including platform because of possible execution order)
          ignore:               Ignored elements (no duplicates)
          params:               Debugging output
        '''

    # Load parser with custom formatter
    parser = argparse.ArgumentParser(description=descripton, formatter_class=argparse_raw_formater)

    # Argparse help descriptions
    help_feature_dir="Directory of GardenLinux features"
    help_features="List of feaures to ignore (comma-separated)"
    help_ignore="List of feaures (comma-separated)"

    # Impositional arg(s)
    parser.add_argument(
        '--featureDir',
        type=str,
        default="../features",
        help=help_feature_dir)
    parser.add_argument(
        '--features',
        type=lambda arg: [f for f in arg.split(',') if f],
        required=True,
        help=help_features)
    parser.add_argument(
        '--ignore',
        type=lambda arg: [i for i in arg.split(',') if i],
        default=[],
        help=help_ignore)

    # Positional arg(s)
    args_type_allowed = [
        'cname',
        'features',
        'platforms',
        'flags',
        'elements',
        'params',
        'ignore'
    ]

    parser.add_argument("type", nargs="?", choices=args_type_allowed, default="cname")
    args = parser.parse_args()

    return(args)


def get_yaml_content(fname):
    """ Read YAML files and get content """
    try:
        with open(fname) as f:
            content = yaml.load(f, Loader=yaml.FullLoader)
            return content
    except FileNotFoundError:
        # Avoid creating an unexpected artifact with missing
        # features
        print(f'garden-feat: error: Could not find feature: {fname}')
        sys.exit(1)


def get_cname(all_features, start_features, dependency_chain):
    """ Return the cname """
    cname_features = []
    cname = ""

    # Iterate one by one through all start features which are
    # already sorted by their type (Platform > element > flag).
    #
    # If one of our sorted start features is a dependency of another start feature,
    # we can skip it, because they are already clearly identified by the start feature
    # which requires them.
    #
    # In order to identify dependent start features, simply jump from one
    # sorted start feature to another in the dependency chain.
    # If a start feature is on the left side of a higher sorted start feature in
    # the dependency chain, the iterated start feature is then the dependency of the
    # other one. At this point, the start feature is not relevant for the cname creation.
    #
    # At the end, there are only start features, that are no dependencies of other start
    # features, which ultimately creates the unique cname.
    for feature in start_features:
        # If we already jumped to the end of our dependency chain,
        # there is no start feature left which is not a dependency
        # of another start feature. Therefore, stop here.
        if len(dependency_chain) == 0:
            break

        # If the start feature is not in the dependency chain (anymore),
        # we can skip it then.
        if feature not in dependency_chain:
            continue

        # Search for the start feature in the dependency chain.
        # Cut the dependency chain from left to ride each time,
        # we found our start feature. Everything on the left side
        # is a dependency and can therefore be skipped next time.
        index = dependency_chain.index(feature)
        dependency_chain = dependency_chain[index:]
        cname_features.append(feature)

    # Finally, put all cname parts together to a string
    # Keep in mind that flag features are concatinated without
    # a seperator.
    for feature in cname_features:
        # First feature in the string, just add it
        if len(cname) == 0:
            cname = feature
        # It is no flag feature, concatenate it with a seperator 
        elif all_features[feature]['type'] != FEATURE_TYPE_FLAG:
            cname += f"-{feature}"
        # It is a flag feature, concatenate it without a seperator
        else:
            cname += feature

    return cname


def get_feature_params(features_matrix):
    """ Get params/metadata from features """
    filter = ['description', 'type', 'features']
    feature_params = {}

    # Strip out all uneeded keys by filter
    for k, v in features_matrix[MATRIX_TYPE_INCLUDE].items():
        for a, b in v.items():
            if a not in filter and a != '':
                feature_params[a]=b

    return feature_params


def get_feature_names_by_types(all_features, feature_names, types):
    """ Returns a list of filtered feature names by type """
    return [k for k in feature_names if all_features[k]['type'] in types]


def get_feature_names(features):
    """ Returns a flattend list of features """
    return [k for k,v in features]


def get_all_features(feature_dir):
    """
    Loads all features from a given directory
    and return them as a dict
    """
    features = {}

    for feature in os.listdir(feature_dir):
        if not os.path.isdir(f"{feature_dir}/{feature}"):
            continue

        file_name = f"{feature_dir}/{feature}/info.yaml"
        features[feature] = get_yaml_content(file_name)

    return features


def get_feature_matrix(all_features, start_feature_names, ignored_feature_names):
    """
    Get a feature matrix including all included, excluded and ignored features
    as well as the dependency chain of features.
    The dependency chain is a comma seperated list of features representing
    a chain from the buttom to the top regarding the dependency.
    """
    features_matrix = {}
    features_matrix[MATRIX_TYPE_INCLUDE] = {}
    features_matrix[MATRIX_TYPE_EXCLUDE] = {}
    features_matrix[MATRIX_TYPE_IGNORE] = {}
    features_matrix[MATRIX_TYPE_DEP_CHAIN] = []

    # Add ignored features to feature_matrix
    add_ignored_features(all_features, features_matrix, ignored_feature_names)

    # Run recursion to fetch all included and excluded features
    # as well as the dependency chain.
    traverse_features_tree(all_features, features_matrix, start_feature_names)

    # Validate for features that are in- & excluded at the same time
    check_excluded_features(features_matrix)

    return features_matrix


def traverse_features_tree(all_features, features_matrix, feature_names):
    """ Traverse the complete feature tree based on a set of included features """
    for feature in feature_names:
        # Skip ignored features, we do not need
        # to traverse them.
        if feature in features_matrix[MATRIX_TYPE_IGNORE].keys():
            continue

        feature_content = all_features[feature]

        # Check if processed feature has some sub features (include/exclude)
        sub_features = all_features[feature].get('features', None)
        included_feature_names = []
        excluded_feature_names = []

        if sub_features:
            included_feature_names = sub_features.get('include', [])
            excluded_feature_names = sub_features.get('exclude', [])

        # Extend feature_matrix with the currently processed feature
        # as one of the included ones.
        features_matrix[MATRIX_TYPE_INCLUDE][feature] = feature_content

        # Extend feature_matrix with all excluded features that
        # are defined by the currently processed feature.
        for excluded_feature in excluded_feature_names:
            features_matrix[MATRIX_TYPE_EXCLUDE][excluded_feature] = all_features[excluded_feature]

        # For all other included features, we run the recursion
        # in order to traverse deeper into the feature tree.
        traverse_features_tree(all_features, features_matrix, included_feature_names)

        # Check if the processed feature is already part of the dependency chain.
        # If not, add the currently processed feature to the chain.
        # If yes, the processed feature has already been added by another feature before
        # and is therefore a dependency of the another feature.
        if feature not in features_matrix[MATRIX_TYPE_DEP_CHAIN]:
            features_matrix[MATRIX_TYPE_DEP_CHAIN].append(feature)


def check_excluded_features(features_matrix):
    """ Check if a feature is included and excluded at the same time """
    # Now check, if the feature tree excluded some features that usually
    # should have been included. If so, this is an error.
    for excluded_feature in features_matrix[MATRIX_TYPE_EXCLUDE].keys():
        if excluded_feature in features_matrix[MATRIX_TYPE_INCLUDE].keys():
            print(f'garden-feat: error: {excluded_feature} has been excluded by another feature.')
            sys.exit(1)


def sort_feature_names_by_type(all_features, feature_names):
    """ Sort a list of feature names by their type """
    sorted_feature_names = []
    features = {
        FEATURE_TYPE_PLATFORM: [],
        FEATURE_TYPE_ELEMENT: [],
        FEATURE_TYPE_FLAG: []
    }

    # First, get the content of all features
    for feature in feature_names:
        yaml_content = all_features[feature]
        feature_type = yaml_content['type']

        if feature_type not in features.keys():
            print(f'Error: Feature {feature} uses unsupported type {feature_type}.')
            sys.exit(1)

        features[feature_type].append(feature)

    # Check if there is more than one platform.
    if len(features[FEATURE_TYPE_PLATFORM]) > 1:
        print(f'Error: Only a single platform is supported.')
        sys.exit(1)

    # Check if there is at least one platform
    if len(features[FEATURE_TYPE_PLATFORM]) == 0:
        print(f'Error: No platform has been specified.')
        sys.exit(1)

    sorted_feature_names += features[FEATURE_TYPE_PLATFORM]
    sorted_feature_names += features[FEATURE_TYPE_ELEMENT]
    sorted_feature_names += features[FEATURE_TYPE_FLAG]

    return sorted_feature_names


def add_ignored_features(all_features, features_matrix, ignored_feature_names):
    """ Add ignored features to the features_matrix to have a complete dict """
    for feature in ignored_feature_names:
        features_matrix[MATRIX_TYPE_IGNORE][feature] = all_features[feature]


if __name__ == "__main__":
    main()