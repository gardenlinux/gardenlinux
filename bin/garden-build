#!/usr/bin/env bash
set -Eeuo pipefail

thisDir="$(dirname "$(readlink -f "$BASH_SOURCE")")"
source "$thisDir/.constants.sh" \
	--flags 'no-build,debug,skip-tests,suite:,debian-mirror,gardenversion:,timestamp:' \
	--flags 'ports,arch:,qemu,features:,disable-features:,commitid:,userid:,usergid:' \
	--flags 'suffix:,prefix:' \
	--

export PATH="${thisDir}:${PATH}"
export REPO_ROOT="$(readlink -f "${thisDir}/..")"

commitid="${commitid:-local}"
eval "$dgetopt"

# Update all param flags
while true; do
	flag="$1"; shift
	dgetopt-case "$flag"
	case "$flag" in
		--debug)			debug=1 ;;			# for jumping in the prepared image"
		--debian-mirror)		debianMirror=1 ;;		# for adding Debian native mirrors (only dev; default: 0)
		--ports) 			ports=1 ;;			# for adding Debian native "debian-ports" repository
		--arch) 			arch="$1"; shift ;; 		# for adding "--arch" to garden-init
		--qemu) 			qemu=1 ;;			# for using "qemu-debootstrap"
		--features) 			features="$1"; shift ;; 	# adding features
		--disable-features)		disablefeatures="$1"; shift ;; 	# ignoring features
		--suite)			suite="$1"; shift ;; 		# suite is a parameter this time
		--gardenversion|--timestamp)	version="$1"; shift ;; 		# timestamp is a parameter this time
		--suffix) 			suffix="$1"; shift ;; 		# target name prefix
		--prefix) 			prefix="$1"; shift ;; 		# target name suffix
		--commitid) 			commitid="$1"; shift ;; 	# build commit hash
		--commitid-long) 		commitid_long="$1"; shift ;; 	# build commit hash, untruncated - used for /etc/os-release only
		--skip-tests) 			tests=0 shift ;; 		# skip unit tests
		--userid) 			userID="$1" shift ;;
		--usergid)			userGID="$1" shift ;;
		--) break ;;
		*) eusage "unknown flag '$flag'" ;;
	esac
done

if [ ${debug:-} ]; then
	set -x
fi

commitid_long="${commitid_long:-$commitid}"
userID="${userID:-$(id -u)}";
userGID="${userGID:-$(id -g)}";
disablefeatures="${disablefeatures:-}"
epoch="$(garden-version --epoch "$version")"
serial="$(garden-version --date "$version")"
dpkgArch="${arch:-$(dpkg --print-architecture | awk -F- "{ print \$NF }")}"
export arch="$arch"
export debianMirror=$debianMirror

fullfeatures="$(garden-feat --featureDir $featureDir --features "$features" --ignore "$disablefeatures" features)"
targetPlatform="$(garden-feat --featureDir $featureDir --features "$features" --ignore "$disablefeatures")"

# Using the native Debian repository on production builds (_prod) is not supported
if [ $debianMirror -eq 1 ]; then
	if [[ $fullfeatures = *_prod* ]]; then
		echo "Using the native Debian repository on production builds (_prod) is not supported."
		exit 1
	fi
fi

if [ -z "${prefix+x}" ]; then
	prefix="/$(garden-feat --featureDir $featureDir --features "$features" --ignore "$disablefeatures" cname)-$dpkgArch-$version-$commitid"
fi

exportDir="output"
outputDir="$exportDir$prefix"

if [ "${OUTPUT_DIR+defined}" ]; then
	outputDir="${OUTPUT_DIR}${prefix}"
	buildLog="${outputDir}/build.log"
	fullfeature_file="${outputDir}/fullfeature.info"
	prefix_file="${outputDir}/prefix.info"
	mkdir -p "${outputDir}"
	touch "${buildLog}"
else
	volumeDir="/output$prefix"
	buildLog="/output$prefix.log"

        fullfeature_file="/output/fullfeature.info"
        prefix_file="/output/prefix.info"

	touch "${buildLog}"
	chown "${userID}":"${userGID}" "${buildLog}"
	chmod 644 "${buildLog}"
fi

echo "$fullfeatures" > "$fullfeature_file"
echo "$prefix" > "$prefix_file"

echo > "${buildLog}"
exec > >(tee -a "${buildLog}") 2> >(tee -a "${buildLog}" >&2)

touch_epoch() {
	while [ "$#" -gt 0 ]; do
		local f="$1"; shift
		touch --no-dereference --date="@$epoch" "$f"
	done
}

keyringPlain="$scriptsDir/../gardenlinux.asc"

export GNUPGHOME="$(mktemp -d)"
keyring="$GNUPGHOME/gardenlinux.kbx"
gpg --batch --no-default-keyring --keyring "$keyring" --import "$keyringPlain"

{
	export version="$version"

	initArgs=( --arch="$dpkgArch" )
	configArgs=( --arch="$dpkgArch" )
	initArgs+=( --debian )

	if [ $debianMirror -eq 1 ]; then
		initArgs+=( --debian-mirror )
	fi

	if [ -n "${ports-}" ]; then
		initArgs+=(
			--debian-ports
			--include=debian-ports-archive-keyring
		)
	fi

	initArgs+=( --keyring "$keyring" --keyring-plain "$keyringPlain" )
	initArgs+=( --debootstrap-script "$suite" )

	[ -n "$fullfeatures" ] && initArgs+=( --features "$fullfeatures" )

	if [ -n "${qemu:-}" ]; then
		initArgs+=( --debootstrap="qemu-debootstrap" )
	fi

	garden-init "${initArgs[@]}" rootfs "$suite" "$version" "@$epoch"

	[ -n "$fullfeatures" ] && configArgs+=( --features "$fullfeatures" )

	garden-config "${configArgs[@]}" rootfs

	aptVersion="$("$scriptsDir/.apt-version.sh" rootfs)"

	garden-slimify rootfs

	sourcesListArgs=()
	[ -z "${ports:-}" ] || sourcesListArgs+=( --ports )

	#Brand it
	sed -i "s/^PRETTY_NAME=.*$/PRETTY_NAME=\"Garden Linux $(garden-version)\"/g" rootfs/etc/os-release
	sed -i "s/^HOME_URL=.*$/HOME_URL=\"https:\/\/gardenlinux.io\/\"/g" rootfs/etc/os-release
	sed -i "s/^SUPPORT_URL=.*$/SUPPORT_URL=\"https:\/\/github.com\/gardenlinux\/gardenlinux\"/g" rootfs/etc/os-release
	sed -i "s/^BUG_REPORT_URL=.*$/BUG_REPORT_URL=\"https:\/\/github.com\/gardenlinux\/gardenlinux\/issues\"/g" rootfs/etc/os-release
	echo "GARDENLINUX_FEATURES=$fullfeatures" >> rootfs/etc/os-release
	echo "GARDENLINUX_VERSION=$($scriptsDir/garden-version)" >> rootfs/etc/os-release
	echo "GARDENLINUX_VERSION_AT_BUILD=$($scriptsDir/garden-version --major | tr -d '\n'; echo -n "."; $scriptsDir/garden-version --minor)" >> rootfs/etc/os-release
	echo "GARDENLINUX_COMMIT_ID_LONG=$commitid_long" >> rootfs/etc/os-release
	echo "GARDENLINUX_COMMIT_ID=$commitid" >> rootfs/etc/os-release
	echo "VERSION_CODENAME=$version" >> rootfs/etc/os-release
	if [ -f rootfs/etc/update-motd.d/05-logo ]; then
		sed -i "s/@VERSION@/$(garden-version)/" rootfs/etc/update-motd.d/05-logo
	fi

	create_artifacts() {
		local targetBase="$1"; shift
		local rootfs="$1"; shift
		local version="$1"; shift
		local variant="$1"; shift

		local tarArgs=()
		if [ -n "${qemu:-}" ]; then
			tarArgs+=( --exclude="./usr/bin/qemu-*-static" )
		fi

		tarArgs+=( --include-dev )

		if [ "$variant" != "sbuild" ]; then
			garden-debian-sources-list "${sourcesListArgs[@]}" "$rootfs" "$suite" "$version"
		else
			# sbuild needs "deb-src" entries
			garden-debian-sources-list --deb-src "${sourcesListArgs[@]}" "$rootfs" "$suite" "$version"

			# schroot is picky about "/dev" (which is excluded by default in "garden-tar")
			# see https://github.com/debuerreotype/debuerreotype/pull/8#issuecomment-305855521
		fi

		garden-tar "${tarArgs[@]}" "$rootfs" "$targetBase.tar.xz"
		du -hsx "$targetBase.tar.xz"

		sha256sum "$targetBase.tar.xz" | cut -d" " -f1 > "$targetBase.tar.xz.sha256"
		cat "$targetBase.tar.xz.sha256"
		touch_epoch "$targetBase.tar.xz.sha256"

		garden-chroot "$rootfs" bash -c '
			if ! dpkg-query -f='\''${binary:Package} ${Version}\n'\'' -W 2> /dev/null; then
				dpkg -l
			fi
		' > "$targetBase.manifest"
		touch_epoch "$targetBase.manifest"

		for f in os-release; do
			targetFile="$targetBase.$(basename "$f" | sed -r "s/[^a-zA-Z0-9_-]+/-/g")"
			if [ -e "$rootfs/etc/$f" ]; then
				cp "$rootfs/etc/$f" "$targetFile"
				touch_epoch "$targetFile"
			fi
		done

		# Do not run when building for container image artifacts
		if [ "$targetPlatform" != "container" ]; then

			echo "#### building diskimage"
			for i in $(tr ',' '\n' <<< "$fullfeatures"); do
				if [ -r "$featureDir/$i/fstab" ]; then
					printf "  found new fstab in $i\n"
					currentfstab="$(cat $featureDir/$i/fstab)"
				fi
			done
			for i in $(tr ',' '\n' <<< "$fullfeatures"); do
				if [ -x "$featureDir/$i/fstab.mod" ]; then
					printf "    modifying fstab with %s\n" "$i"
					currentfstab=$("$featureDir/$i/fstab.mod" <<< "$currentfstab")
				fi
			done
			currentfstab="$(sed -e "s/#.*\$//" -e "/^$/d" <<< "$currentfstab")"
			if [ -n "$currentfstab" ]; then
				printf "  building rawfile\n"
				makepart "$rootfs" "$arch" <<< "$currentfstab" | makedisk "$rootfs" "$targetBase.raw"
			fi
		fi

		for i in $(tr ',' '\n' <<< "$fullfeatures"); do
			if [ -x $featureDir/$i/image ]; then
				printf "  building separat extra image for $i\n"
                                "$featureDir/$i/image" "$rootfs" "$targetBase"
			fi
			if [ -x $featureDir/$i/convert ]; then
                                printf "  converting image format for $i\n"
                                "$featureDir/$i/convert" "$targetBase"
                        fi
		done
	}

	for rootfs in rootfs*/; do
		rootfs="${rootfs%/}" # "rootfs", "rootfs-slim", ...

		du -hsx "$rootfs"

		variant="${rootfs#rootfs}" # "", "-slim", ...
		variant="${variant#-}" # "", "slim", ...

		variantDir="$outputDir/$variant"
		mkdir -p "$variantDir"

		targetBase="${variantDir}rootfs"

		create_artifacts "$targetBase" "$rootfs" "$version" "$variant"
	done

} >&2

if [ "${OUTPUT_DIR+defined}" ]; then
	echo
	echo ${outputDir}
else
        for i in $(find "${outputDir}" -type f); do
		newname="$(dirname $i).$(basename $i | cut -d. -f 2-)"
		mv $i $newname
		install -v -m 0644 -p -o "${userID}" -g "${userGID}" $newname "/output"
	done
fi
