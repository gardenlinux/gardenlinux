#!/usr/bin/env bash
set -euox pipefail

. $(dirname $0)/.helper
. ${srcDir}/VERSION

echo "### getting the keys of the maintainers"
gpg --locate-keys torvalds@kernel.org gregkh@kernel.org
gpg --tofu-policy good 647F28654894E3BD457199BE38DBBDC86092693E
# Steven Rostedt <rostedt@goodmis.org>
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 514B0EDE3C387F944FB3799329E574109AEBFAAA
gpg --tofu-policy good 514B0EDE3C387F944FB3799329E574109AEBFAAA
	
echo "### updating package repsitory"
sudo apt-get update
echo "### installing minimal create requirements"
sudo apt-get install --no-install-recommends -y equivs kernel-wedge python3-debian rsync libdistro-info-perl git quilt
echo "### pulling kernel and rt-patches" 
wget -nc https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$KERNEL_VERSION.tar.sign
wget -nc https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/$(cut -d. -f-2 <<< ${KERNEL_BASE})/older/patches-$KERNEL_RT_VERSION.tar.sign
while ! $(xz -dc linux-$KERNEL_VERSION.tar.xz | gpg --verify linux-$KERNEL_VERSION.tar.sign -); do
	rm -f linux-$KERNEL_VERSION.tar.xz
	wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$KERNEL_VERSION.tar.xz
done
while ! $(xz -dc patches-$KERNEL_RT_VERSION.tar.xz | gpg --verify patches-$KERNEL_RT_VERSION.tar.sign -); do
	rm -f patches-$KERNEL_RT_VERSION.tar.xz
	wget https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/$(cut -d. -f-2 <<< ${KERNEL_BASE})/older/patches-$KERNEL_RT_VERSION.tar.xz
done

echo "### cloning the latest and greatest debian release environment to linux"
if [ -d $src ]; then
	cd $src; git pull; cd ..
else 
        git clone --depth 1 https://salsa.debian.org/kernel-team/linux.git $src
fi
echo "### cloning the old kernel to linux-$KERNEL_DEBIAN"
git clone --depth 1 --single --branch debian/$KERNEL_DEBIAN https://salsa.debian.org/kernel-team/linux.git linux-$KERNEL_DEBIAN

cd $src
mv debian/changelog debian/changelog.org
cd ..

if $(dpkg --compare-versions $KERNEL_DEBIAN lt $KERNEL_VERSION); then 
	KERNEL_VERSION="$KERNEL_VERSION-1"
	echo "### pulling aufs5 from upstream not from debian" 
	git clone https://github.com/sfjro/aufs5-standalone.git
	cd aufs5-standalone
	git -c advice.detachedHead=false checkout aufs$(cut -d. -f-2 <<< ${KERNEL_BASE})
	cd ..

	echo "### bootstrapping the kernel build"
	cd $src
	# keeping the upstream defines
	mv debian/config/defines ..
	rm -rf debian/config debian/patches debian/patches-rt/*
	cp -R ../linux-$KERNEL_DEBIAN/debian/patches ../linux-$KERNEL_DEBIAN/debian/patches-rt ../linux-$KERNEL_DEBIAN/debian/config debian/
	mv ../defines debian/config/
	echo "### integrating rt-patches"
	debian/bin/genpatch-rt ../patches-$KERNEL_RT_VERSION.tar.xz

	echo "### integrating aufs5-patches"
	debian/bin/genpatch-aufs ../aufs5-standalone
	cd ..

	# checking out linux stable to have the whole changelog from the kernel readable for debian/bin/stable-update 
	git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git

	cd $src
	debian/bin/stable-update ../linux-stable $KERNEL_VERSION
	mv debian/changelog debian/changelog.newkernel
	cd ..
else
	KERNEL_VERSION=$KERNEL_DEBIAN
fi

cd $src
echo "### setting Garden Linux abi"
sed -i "s/abiname:.*/abiname:$KERNEL_ABI/" debian/config/defines

echo "### patching Garden Linux enhancements"
patch -p1 < $srcDir/rt-0038.patch

echo "### populating the changelog"
cat - > debian/changelog.new <<EOF
linux ($KERNEL_VERSION) UNRELEASED; urgency=medium

  [ Garden Linux Maintainers ]
  * [rt] Update to $KERNEL_RT_VERSION and re-enable.
  * Bump ABI to $KERNEL_ABI.
  * Patching certs to Garden Linux
$(cat $srcDir/changelog)
 -- Garden Linux Maintainers <contact@gardenlinux.io>  $(date -R)

EOF

cd ..
# checking out linux stable to have the whole changelog from the kernel readable for debian/bin/stable-update 
git clone --single --branch linux-$(echo $KERNEL_BASE | sed s/0$/y/) --bare https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
cd $src

touch debian/changelog.newkernel
cat debian/changelog.new debian/changelog.newkernel debian/changelog.org > debian/changelog
rm -f debian/changelog.new debian/changelog.newkernel debian/changelog.org

echo "### setting certificate"
# to make sure we do not take this accidently
rm -f debian/certs/debian-uefi-certs.pem
cp /kernel.full debian/certs/gardenlinux-kernel-certs.pem
sed -i "s/debian-uefi-certs.pem/gardenlinux-kernel-certs.pem/" debian/config/config debian/config/featureset*/config

echo "### generating a debian conform orig file and install"
[ -e ../orig/linux_*.tar.xz ] || PYTHONHASHSEED=0 debian/bin/genorig.py ../linux-*.tar.xz
make -f debian/rules orig
echo "### generate custom control files"
PYTHONHASHSEED=0 debian/bin/gencontrol.py
echo "### deviate needed packages and install"
TMPDIR=.. mk-build-deps debian/control
sudo apt-get install -y --no-install-recommends -f ../linux-build-deps_*_${KERNEL_ARCH}.deb

echo "### enabling control file (supposed to fail)"
make -f debian/rules debian/control-real || /bin/true

donotmove="$(ls ..)"
echo "### build"
debuild
mv ../orig/linux_*.tar.xz ..
rm -rf ../orig
src=linux
move_package .. $donotmove
