#!/usr/bin/env bash
set -euo pipefail
# set -x

own_dir="$(readlink -f "$(dirname "${0}")")"
repo_root="${own_dir}/.."

source "${own_dir}/lib.sh"

install_kubectl
install_tkn

# retrieve and configure kubeconfig (sets KUBECONFIG env var)
if [ -z ${KUBECONFIG:-} ] &&  [ -n ${SECRETS_SERVER_ENDPOINT:-} ]; then
  kubecfg
fi

# also handles default-values for env-vars
export_env

function cleanup_pipelineruns {
  echo "purging old pipelineruns"
  tkn \
    --namespace "${GARDENLINUX_TKN_WS}" \
    pipelineruns \
    delete \
    --force \
    --all \
    --keep 20
}

function create_credentials {
  ci/render_credentials.py \
    --outfile "${credentials_outfile}"

  if kubectl get secret -n "${GARDENLINUX_TKN_WS}" secrets &> /dev/null; then
    kubectl delete secret -n "${GARDENLINUX_TKN_WS}" secrets
  fi

  echo "Creating secret"
  $(which kubectl) create secret generic secrets \
    -n "${GARDENLINUX_TKN_WS}" \
    --from-file=config.json="${credentials_outfile}"
}


echo "render pipelines"
cd "${repo_root}"

pipeline_cfg="${repo_root}/flavours.yaml"
outfile_pipeline_main='rendered_pipeline_main.yaml'
outfile_pipeline_packages='rendered_pipeline_packages.yaml'

EXTRA_ARGS=
if [ ! -z "${VERSION:-}" ]; then
  EXTRA_ARGS="--version=${VERSION}"
fi
if [ ! -z "${ADDITIONAL_RECIPIENTS:-}" ]; then
  EXTRA_ARGS="${EXTRA_ARGS} --additional-recipients=${ADDITIONAL_RECIPIENTS}"
fi
if [ ! -z "${ONLY_RECIPIENTS:-}" ]; then
  EXTRA_ARGS="${EXTRA_ARGS} --only-recipients=${ONLY_RECIPIENTS}"
fi
if [ ! -z "${PYTEST_CFG:-}" ]; then
  EXTRA_ARGS="${PYTEST_CFG} --pytest-cfg={PYTEST_CFG}"
fi

cleanup_pipelineruns

# for local dev rendering use latest remote commit and no local one.
if [ ! -z "${CC_CONFIG_DIR:-}" ]; then
  echo "Local dev enviroment, using remote commit"
  # does not work on MacOS:
  # git ls-remote origin refs/heads/${BRANCH_NAME} | { read head_commit dummy_rest_of_line ; }
  read head_commit dummy_rest_of_line <<< $(git ls-remote origin refs/heads/${BRANCH_NAME})
else
  head_commit="$(git rev-parse @)"
fi
echo "head-commit: ${head_commit}"

pipeline_run="$PWD/pipeline_run.yaml"
pipeline_package_run="$PWD/pipeline_packages_run.yaml"
rendered_task="$PWD/rendered_task.yaml"
credentials_outfile="$PWD/credentials.json"

# create pipeline-run for current commit
ci/render_pipeline_run.py $EXTRA_ARGS \
  --branch "${BRANCH_NAME}" \
  --committish "${head_commit}" \
  --cicd-cfg 'default' \
  --flavour-set "${FLAVOUR_SET}" \
  --git-url "${GIT_URL}" \
  --promote-target "${PROMOTE_TARGET}" \
  --oci-path "${OCI_PATH}" \
  --publishing-action "${PUBLISHING_ACTIONS}" \
  --outfile "${pipeline_run}" \
  --outfile-packages "${pipeline_package_run}"

PATCH_BRANCH=
if [ ! -z ${USE_PATCHING:-} ]; then
  export PATCH_BRANCH="${BRANCH_NAME}"
  echo "Patching target working dir with local diff against ${PATCH_BRANCH}"
fi

RENDER_TASK_EXTRA_ARGS=
if [ ! -z ${SECRETS_SERVER_ENDPOINT:-} ]; then
  RENDER_TASK_EXTRA_ARGS="--use-secrets-server"
else
  # secrets-server won't be available; create config from local files and put it as
  # k8s secret into cluster.
  echo "create credentials"
  create_credentials
fi

ci/render_all.py \
  --pipeline_cfg "${pipeline_cfg}" \
  --flavour-set "${FLAVOUR_SET}" \
  --outfile-pipeline-main "${outfile_pipeline_main}" \
  --outfile-pipeline-packages "${outfile_pipeline_packages}" \
  --outfile-tasks "${rendered_task}" \
  ${RENDER_TASK_EXTRA_ARGS}

# XXX hardcode other resources for now

for manifest in \
  "${rendered_task}" \
  "${outfile_pipeline_main}" \
  "${outfile_pipeline_packages}"
do
  echo "Apply of ${manifest}"
  $(which kubectl) apply -n "${GARDENLINUX_TKN_WS}" -f "${manifest}"
done

image_build=false
package_build=false
wait=false
for arg in "$@"
do
    echo "Found arg $arg";
    if [ $arg ==  "--image-build" ]; then
      image_build=true
    fi
    if [ $arg ==  "--package-build" ]; then
      package_build=true
    fi
    if [ $arg ==  "--wait" ]; then
      wait=true
    fi
done

# --image-build calls triggering the pipeline run for image build
if [ ${image_build} = true ] ; then
  echo "Build images"
  kubectl apply -n "${GARDENLINUX_TKN_WS}" -f "${pipeline_run}"
  if [ ${wait} = true ] ; then
    echo "waiting for new pipelinerun ${pipeline_run}"
    ci/wait_for_pipelinerun.py --pipelinerun-file "${pipeline_run}" --namespace "${GARDENLINUX_TKN_WS}"
  fi
fi

# --package-build calls triggering the pipeline run for image build
if [ ${package_build} = true ]; then
  echo "Build packages"
  kubectl apply -n "${GARDENLINUX_TKN_WS}" -f "${pipeline_package_run}"
  if [ ${wait} = true ]; then
    echo "waiting for new pipelinerun ${pipeline_package_run}"
    ci/wait_for_pipelinerun.py --pipelinerun-file "${pipeline_package_run}" --namespace "${GARDENLINUX_TKN_WS}"
  fi
fi

echo 'done: refreshed pipeline(s) for current commit'
