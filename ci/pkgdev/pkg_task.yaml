apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-build-packages
spec:
  params:
  - default: /workspace/gardenlinux
    description: Working dir with git repo
    name: repodir
    type: string
  - default: https://github.com/gardenlinux/gardenlinux.git
    description: URL to Git repository with gardenlinux
    name: giturl
    type: string
  - default: main
    description: commit/branch to clone
    name: committish
    type: string
  - default: latest
    description: version label uses as tag for upload
    name: version_label
    type: string
  - name: pkg_name
    description: name of package to build
    type: string
    default: none
  - name: cfssl_dir
    description: git wokring dir to clone and build cfssl
    default: /workspace/cfssl
    type: string
  - name: cfssl_fastpath
    description: bypass cfssl build and copy binaries from github (set to true/false)
    default: "false"
    type: string
  - name: gardenlinux_build_deb_image
    description: image from base-build steps to use for package build
    type: string
    default: eu.gcr.io/gardener-project/gardenlinux/gardenlinux-build-deb:398.0.0   
  steps:
  - image: eu.gcr.io/gardener-project/cc/job-image:1.788.0
    name: clone-repo-step
    script: |-
      #!/usr/bin/env python3
      import sys,os;sys.path.insert(1,os.path.abspath(os.path.join("$(params.repo_dir)","ci")))
      import os
      import urllib.parse

      import ccc.github
      import gitutil


      def clone_and_copy(
          giturl: str,
          committish: str,
          repodir: str,
      ):
          repo_dir = os.path.abspath(repodir)
          repo_url = urllib.parse.urlparse(giturl)
          github_cfg = ccc.github.github_cfg_for_hostname(
            repo_url.hostname,
          )
          git_helper = gitutil.GitHelper.clone_into(
            target_directory=repo_dir,
            github_cfg=github_cfg,
            github_repo_path=repo_url.path,
          )
          repo = git_helper.repo
          repo.git.checkout(committish)

          commit_msg = repo.head.commit.message
          commit_hash = repo.head.commit.hexsha

          print(f'cloned to {repo_dir=} {commit_hash=}')
          print('Commit Message:')
          print(commit_msg)

      clone_and_copy(committish='$(params.committish)',repodir='$(params.repo_dir)',giturl='$(params.giturl)')
      if '$(params.cfssl_fastpath)' != 'true':
          clone_and_copy(committish='master',repodir='$(params.cfssl_dir)',giturl='https://github.com/cloudflare/cfssl.git')
      else:
          print('Skipping cloning of cfssl git repository, using fast-path')
  - image: golang:latest
    name: cfssl-build
    script: |
      #!/usr/bin/env bash
      set -e
      set -x

      mkdir -p $(params.repo_dir)/cert/cfssl
      if [ "$(params.cfssl_fastpath)" != "true" ]; then
        # slow-path build CFSSL from github:
        cd $(params.cfssl_dir)
        make
        mv bin/* $(params.repo_dir)/cert/cfssl
      else
        mkdir -p $(params.repo_dir)/bin
        cd $(params.repo_dir)/bin
        # fast-path copy binaries from CFSSL github release:
        cfssl_files=( cfssl-bundle_1.5.0_linux_amd64 \
          cfssl-certinfo_1.5.0_linux_amd64 \
          cfssl-newkey_1.5.0_linux_amd64 \
          cfssl-scan_1.5.0_linux_amd64 \
          cfssljson_1.5.0_linux_amd64 \
          cfssl_1.5.0_linux_amd64 \
          mkbundle_1.5.0_linux_amd64 \
          multirootca_1.5.0_linux_amd64 \
          )

        len2=`expr length _1.5.0_linux_amd64`
        for file in "${cfssl_files[@]}"; do
          len=`expr length $file`
          outname=${file:0:`expr $len - $len2`}
          wget --no-verbose -O $outname https://github.com/cloudflare/cfssl/releases/download/v1.5.0/${file}
          chmod +x $outname
        done
        mv * $(params.repo_dir)/cert/cfssl
      fi
      # cleanup workspace to safe some valuable space
      cd /
      rm -rf $(params.cfssl_dir)
  - image: $(params.gardenlinux_build_deb_image)
    name: make-certs
    script: |
      #!/usr/bin/env bash
      set -e
      set -x
      cd $(params.repo_dir)/cert
      # Note: that make will also build cfssl which was here done in the previous step
      # it will skip this step as it already present, this is a bit fragile
      make
      ls -l
  - image: $(params.gardenlinux_build_deb_image)
    name: package-build
    script: |
      #!/usr/bin/env bash
      set -e
      set -x

      repodir='$(params.repo_dir)'
      pkg_name="$(params.pkg_name)"

      if [ -z "$SOURCE_PATH" ]; then
        SOURCE_PATH="$(readlink -f ${repodir})"
      fi

      if [ -z "${pkg_name}" ]; then
        echo "ERROR: no package name given"
        exit 1
      fi

      echo $(pwd)

      MANUALDIR=$(realpath $repodir/packages/manual)
      KERNELDIR=$(realpath $repodir/packages/kernel)
      CERTDIR=$(realpath $repodir/cert)

      export DEBFULLNAME="Garden Linux Maintainers"
      export DEBEMAIL="contact@gardenlinux.io"
      export BUILDIMAGE="gardenlinux/build-deb"
      export BUILDKERNEL="gardenlinux/build-kernel"
      echo "MANUALDIR: ${MANUALDIR}"
      echo "KERNELDIR: ${KERNELDIR}"
      echo "CERTDIR: ${CERTDIR}"
      ls -l ${CERTDIR}

      # original makefile uses mounts, replace this by linking required dirs
      # to the expexted locations:
      # original: mount <gardenlinuxdir>/.packages but this does not exist so just create
      mkdir /pool
      ls -l ${CERTDIR}
      ln -s ${MANUALDIR} /workspace/manual
      ln -s /../Makefile.inside /workspace/Makefile
      echo "$(gpgconf --list-dir agent-socket)"
      mkdir -p /workspace/.gnupg
      ln -s $(gpgconf --list-dir agent-socket) /workspace/.gnupg/S.gpg-agent
      ln -s ${CERTDIR}/sign.pub /sign.pub
      ln -s ${CERTDIR}/Kernel.sign.full /kernel.full
      ln -s ${CERTDIR}/Kernel.sign.crt /kernel.crt
      ln -s ${CERTDIR}/Kernel.sign.key /kernel.key
      ls -l /kernel.full

      pkg_build_script_path="$SOURCE_PATH/packages/manual/${pkg_name}"
      echo "pkg_build_script_path: ${pkg_build_script_path}"

      if [ ! -f "${pkg_build_script_path}" ]; then
        echo "ERROR: Don't know how to build ${pkg_name}"
        exit 1
      fi

      pkg_build_script_path="$(readlink -f ${pkg_build_script_path})"

      export BUILDTARGET="${OUT_PATH:-/workspace/pool}"
      if [ ! -f "$BUILDTARGET" ]; then
        mkdir "$BUILDTARGET"
      fi

      cd "${BUILDTARGET}"

      ${pkg_build_script_path}
